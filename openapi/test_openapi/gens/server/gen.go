// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package server

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"
	"time"

	externalRef0 "testoapi/gens/models/agent_manager"
	externalRef1 "testoapi/gens/models/billing_manager"
	externalRef2 "testoapi/gens/models/call_manager"
	externalRef3 "testoapi/gens/models/campaign_manager"
	externalRef4 "testoapi/gens/models/chat_manager"
	externalRef5 "testoapi/gens/models/chatbot_manager"
	externalRef6 "testoapi/gens/models/common"
	externalRef7 "testoapi/gens/models/customer_manager"
	externalRef8 "testoapi/gens/models/flow_manager"
	externalRef9 "testoapi/gens/models/number_manager"

	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
	strictgin "github.com/oapi-codegen/runtime/strictmiddleware/gin"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// GetAccesskeysParams defines parameters for GetAccesskeys.
type GetAccesskeysParams struct {
	// PageSize The size of results.
	PageSize *externalRef6.PageSize `form:"page_size,omitempty" json:"page_size,omitempty"`

	// PageToken The token. tm_create
	PageToken *externalRef6.PageToken `form:"page_token,omitempty" json:"page_token,omitempty"`
}

// PostAccesskeysJSONBody defines parameters for PostAccesskeys.
type PostAccesskeysJSONBody struct {
	Detail *string    `json:"detail,omitempty"`
	Expire *time.Time `json:"expire,omitempty"`
	Name   *string    `json:"name,omitempty"`
}

// PutAccesskeysIdJSONBody defines parameters for PutAccesskeysId.
type PutAccesskeysIdJSONBody = interface{}

// GetActiveflowsParams defines parameters for GetActiveflows.
type GetActiveflowsParams struct {
	// PageSize The size of results.
	PageSize *externalRef6.PageSize `form:"page_size,omitempty" json:"page_size,omitempty"`

	// PageToken The token. tm_create
	PageToken *externalRef6.PageToken `form:"page_token,omitempty" json:"page_token,omitempty"`
}

// PostActiveflowsJSONBody defines parameters for PostActiveflows.
type PostActiveflowsJSONBody struct {
	Actions *[]externalRef8.Action `json:"actions,omitempty"`

	// FlowId Flow id of.
	FlowId *string `json:"flow_id,omitempty"`

	// Id ID of the activeflow.
	Id *string `json:"id,omitempty"`
}

// GetAgentsParams defines parameters for GetAgents.
type GetAgentsParams struct {
	// PageSize The size of results.
	PageSize *externalRef6.PageSize `form:"page_size,omitempty" json:"page_size,omitempty"`

	// PageToken The token. tm_create
	PageToken *externalRef6.PageToken `form:"page_token,omitempty" json:"page_token,omitempty"`

	// TagIds Comma separated tag ids.
	TagIds *string `form:"tag_ids,omitempty" json:"tag_ids,omitempty"`

	// Status Agent status.
	Status *externalRef0.AgentStatus `form:"status,omitempty" json:"status,omitempty"`
}

// PostAgentsJSONBody defines parameters for PostAgents.
type PostAgentsJSONBody struct {
	Addresses *[]externalRef6.Address `json:"Addresses,omitempty"`
	Detail    *string                 `json:"Detail,omitempty"`
	Name      *string                 `json:"Name,omitempty"`
	Password  *string                 `json:"Password,omitempty"`

	// Permission Permission type
	Permission *externalRef0.AgentPermission `json:"Permission,omitempty"`

	// RingMethod Represents an agent resource.
	RingMethod *externalRef0.AgentRingMethod `json:"RingMethod,omitempty"`
	TagIDs     *[]string                     `json:"TagIDs,omitempty"`
	Username   *string                       `json:"Username,omitempty"`
}

// PutAgentsIdJSONBody defines parameters for PutAgentsId.
type PutAgentsIdJSONBody = interface{}

// PutAgentsIdAddressesJSONBody defines parameters for PutAgentsIdAddresses.
type PutAgentsIdAddressesJSONBody struct {
	Addresses *[]externalRef6.Address `json:"addresses,omitempty"`
}

// PutAgentsIdPasswordJSONBody defines parameters for PutAgentsIdPassword.
type PutAgentsIdPasswordJSONBody struct {
	Password *string `json:"Password,omitempty"`
}

// PutAgentsIdTagIdsJSONBody defines parameters for PutAgentsIdTagIds.
type PutAgentsIdTagIdsJSONBody struct {
	TagIDs *[]string `json:"TagIDs,omitempty"`
}

// GetAvailableNumbersParams defines parameters for GetAvailableNumbers.
type GetAvailableNumbersParams struct {
	// PageSize The size of results.
	PageSize *externalRef6.PageSize `form:"page_size,omitempty" json:"page_size,omitempty"`

	// CountryCode The ISO country code.
	CountryCode string `form:"country_code" json:"country_code"`
}

// GetBillingAccountsParams defines parameters for GetBillingAccounts.
type GetBillingAccountsParams struct {
	// PageSize The size of results.
	PageSize *externalRef6.PageSize `form:"page_size,omitempty" json:"page_size,omitempty"`

	// PageToken The token. tm_create
	PageToken *externalRef6.PageToken `form:"page_token,omitempty" json:"page_token,omitempty"`
}

// PostBillingAccountsJSONBody defines parameters for PostBillingAccounts.
type PostBillingAccountsJSONBody struct {
	Detail *string `json:"detail,omitempty"`
	Name   *string `json:"name,omitempty"`

	// PaymentMethod The method of payment used for the account.
	PaymentMethod *externalRef1.AccountPaymentMethod `json:"payment_method,omitempty"`

	// PaymentType The type of payment associated with the account.
	PaymentType *externalRef1.AccountPaymentType `json:"payment_type,omitempty"`
}

// PutBillingAccountsIdJSONBody defines parameters for PutBillingAccountsId.
type PutBillingAccountsIdJSONBody struct {
	Detail *string `json:"detail,omitempty"`
	Name   *string `json:"name,omitempty"`
}

// PostBillingAccountsIdBalanceAddForceJSONBody defines parameters for PostBillingAccountsIdBalanceAddForce.
type PostBillingAccountsIdBalanceAddForceJSONBody struct {
	Balance *float32 `json:"balance,omitempty"`
}

// PostBillingAccountsIdBalanceSubtractForceJSONBody defines parameters for PostBillingAccountsIdBalanceSubtractForce.
type PostBillingAccountsIdBalanceSubtractForceJSONBody struct {
	Balance *float32 `json:"balance,omitempty"`
}

// PutBillingAccountsIdPaymentInfoJSONBody defines parameters for PutBillingAccountsIdPaymentInfo.
type PutBillingAccountsIdPaymentInfoJSONBody struct {
	// PaymentMethod The method of payment used for the account.
	PaymentMethod *externalRef1.AccountPaymentMethod `json:"payment_method,omitempty"`

	// PaymentType The type of payment associated with the account.
	PaymentType *externalRef1.AccountPaymentType `json:"payment_type,omitempty"`
}

// GetCallsParams defines parameters for GetCalls.
type GetCallsParams struct {
	// PageSize The size of results.
	PageSize *externalRef6.PageSize `form:"page_size,omitempty" json:"page_size,omitempty"`

	// PageToken The token. tm_create
	PageToken *externalRef6.PageToken `form:"page_token,omitempty" json:"page_token,omitempty"`
}

// PostCallsJSONBody defines parameters for PostCalls.
type PostCallsJSONBody struct {
	Actions      *[]externalRef8.Action  `json:"actions,omitempty"`
	Destinations *[]externalRef6.Address `json:"destinations,omitempty"`
	FlowId       *string                 `json:"flow_id,omitempty"`

	// Source Contains source or destination detail info.
	Source *externalRef6.Address `json:"source,omitempty"`
}

// GetCampaigncallsParams defines parameters for GetCampaigncalls.
type GetCampaigncallsParams struct {
	// PageSize The size of results.
	PageSize *externalRef6.PageSize `form:"page_size,omitempty" json:"page_size,omitempty"`

	// PageToken The token. tm_create
	PageToken *externalRef6.PageToken `form:"page_token,omitempty" json:"page_token,omitempty"`
}

// GetCampaignsParams defines parameters for GetCampaigns.
type GetCampaignsParams struct {
	// PageSize The size of results.
	PageSize *externalRef6.PageSize `form:"page_size,omitempty" json:"page_size,omitempty"`

	// PageToken The token. tm_create
	PageToken *externalRef6.PageToken `form:"page_token,omitempty" json:"page_token,omitempty"`
}

// PostCampaignsJSONBody defines parameters for PostCampaigns.
type PostCampaignsJSONBody struct {
	// Actions Actions associated with the campaign
	Actions *[]externalRef8.Action `json:"actions,omitempty"`

	// Detail Detailed description of the campaign
	Detail *string `json:"detail,omitempty"`

	// EndHandle Behavior of the campaign after outdial has no more targets.
	EndHandle *externalRef3.CampaignEndHandle `json:"endHandle,omitempty"`

	// Name Name of the campaign
	Name string `json:"name"`

	// NextCampaignId ID of the next campaign
	NextCampaignId *string `json:"nextCampaignId,omitempty"`

	// OutdialId Outdial ID for the campaign
	OutdialId *string `json:"outdialId,omitempty"`

	// OutplanId Outplan ID for the campaign
	OutplanId *string `json:"outplanId,omitempty"`

	// QueueId Queue ID for the campaign
	QueueId *string `json:"queueId,omitempty"`

	// ServiceLevel Service level of the campaign
	ServiceLevel *float32 `json:"serviceLevel,omitempty"`

	// Type Type of campaign.
	Type externalRef3.CampaignType `json:"type"`
}

// PutCampaignsIdJSONBody defines parameters for PutCampaignsId.
type PutCampaignsIdJSONBody struct {
	// Detail Updated details of the campaign
	Detail *string `json:"detail,omitempty"`

	// EndHandle Behavior of the campaign after outdial has no more targets.
	EndHandle *externalRef3.CampaignEndHandle `json:"endHandle,omitempty"`

	// Name Updated name of the campaign
	Name *string `json:"name,omitempty"`

	// ServiceLevel Updated service level of the campaign
	ServiceLevel *float32 `json:"serviceLevel,omitempty"`

	// Type Type of campaign.
	Type *externalRef3.CampaignType `json:"type,omitempty"`
}

// PutCampaignsIdStatusJSONBody defines parameters for PutCampaignsIdStatus.
type PutCampaignsIdStatusJSONBody struct {
	// Status Status of the campaign.
	Status externalRef3.CampaignStatus `json:"status"`
}

// GetChatbotcallsParams defines parameters for GetChatbotcalls.
type GetChatbotcallsParams struct {
	// PageSize The size of results.
	PageSize *externalRef6.PageSize `form:"page_size,omitempty" json:"page_size,omitempty"`

	// PageToken The token. tm_create
	PageToken *externalRef6.PageToken `form:"page_token,omitempty" json:"page_token,omitempty"`
}

// GetChatbotsParams defines parameters for GetChatbots.
type GetChatbotsParams struct {
	// PageSize The size of results.
	PageSize *externalRef6.PageSize `form:"page_size,omitempty" json:"page_size,omitempty"`

	// PageToken The token. tm_create
	PageToken *externalRef6.PageToken `form:"page_token,omitempty" json:"page_token,omitempty"`
}

// PostChatbotsJSONBody defines parameters for PostChatbots.
type PostChatbotsJSONBody struct {
	Detail *string `json:"detail,omitempty"`

	// EngineType Type of engine used by the chatbot.
	EngineType *externalRef5.ChatbotEngineType `json:"engineType,omitempty"`
	InitPrompt *string                         `json:"initPrompt,omitempty"`
	Name       *string                         `json:"name,omitempty"`
}

// PutChatbotsIdJSONBody defines parameters for PutChatbotsId.
type PutChatbotsIdJSONBody struct {
	Detail *string `json:"detail,omitempty"`

	// EngineType Type of engine used by the chatbot.
	EngineType *externalRef5.ChatbotEngineType `json:"engineType,omitempty"`
	InitPrompt *string                         `json:"initPrompt,omitempty"`
	Name       *string                         `json:"name,omitempty"`
}

// GetChatmessagesParams defines parameters for GetChatmessages.
type GetChatmessagesParams struct {
	// PageSize The size of results.
	PageSize *externalRef6.PageSize `form:"page_size,omitempty" json:"page_size,omitempty"`

	// PageToken The token. tm_create
	PageToken *externalRef6.PageToken `form:"page_token,omitempty" json:"page_token,omitempty"`
}

// PostChatmessagesJSONBody defines parameters for PostChatmessages.
type PostChatmessagesJSONBody struct {
	ChatID *string               `json:"chatID,omitempty"`
	Medias *[]externalRef4.Media `json:"medias,omitempty"`

	// Source Contains source or destination detail info.
	Source *externalRef6.Address `json:"source,omitempty"`
	Text   *string               `json:"text,omitempty"`

	// Type Type of the message chat.
	Type *externalRef4.MessagechatType `json:"type,omitempty"`
}

// GetChatroommessagesParams defines parameters for GetChatroommessages.
type GetChatroommessagesParams struct {
	// PageSize The size of results.
	PageSize *externalRef6.PageSize `form:"page_size,omitempty" json:"page_size,omitempty"`

	// PageToken The token. tm_create
	PageToken *externalRef6.PageToken `form:"page_token,omitempty" json:"page_token,omitempty"`

	// ChatroomId The ID of the chatroom
	ChatroomId string `form:"chatroom_id" json:"chatroom_id"`
}

// PostChatroommessagesJSONBody defines parameters for PostChatroommessages.
type PostChatroommessagesJSONBody struct {
	// ChatroomId ID of the chatroom.
	ChatroomId string `json:"chatroom_id"`

	// Medias List of media URLs.
	Medias *[]externalRef4.Media `json:"medias,omitempty"`

	// Text Text of the message.
	Text *string `json:"text,omitempty"`
}

// GetChatroomsParams defines parameters for GetChatrooms.
type GetChatroomsParams struct {
	// PageSize The size of results.
	PageSize *externalRef6.PageSize `form:"page_size,omitempty" json:"page_size,omitempty"`

	// PageToken The token. tm_create
	PageToken *externalRef6.PageToken `form:"page_token,omitempty" json:"page_token,omitempty"`

	// OwnerId The ID of the chatroom owner.
	OwnerId string `form:"owner_id" json:"owner_id"`
}

// PostChatroomsJSONBody defines parameters for PostChatrooms.
type PostChatroomsJSONBody struct {
	// Detail Additional details of the chatroom.
	Detail *string `json:"detail,omitempty"`

	// Name The name of the chatroom.
	Name *string `json:"name,omitempty"`

	// ParticipantId The ID of the participant.
	ParticipantId string `json:"participant_id"`
}

// PutChatroomsIdJSONBody defines parameters for PutChatroomsId.
type PutChatroomsIdJSONBody struct {
	// Detail The new details of the chatroom.
	Detail *string `json:"detail,omitempty"`

	// Name The new name of the chatroom.
	Name string `json:"name"`
}

// GetChatsParams defines parameters for GetChats.
type GetChatsParams struct {
	// PageSize The size of results.
	PageSize *externalRef6.PageSize `form:"page_size,omitempty" json:"page_size,omitempty"`

	// PageToken The token. tm_create
	PageToken *externalRef6.PageToken `form:"page_token,omitempty" json:"page_token,omitempty"`
}

// PostChatsJSONBody defines parameters for PostChats.
type PostChatsJSONBody struct {
	Detail        *string `json:"detail,omitempty"`
	Name          *string `json:"name,omitempty"`
	OwnerID       string  `json:"ownerID"`
	ParticipantID *string `json:"participantID,omitempty"`

	// Type Type of the chat.
	Type *externalRef4.ChatType `json:"type,omitempty"`
}

// PutChatsIdJSONBody defines parameters for PutChatsId.
type PutChatsIdJSONBody struct {
	Detail *string `json:"detail,omitempty"`
	Name   string  `json:"name"`
}

// PostChatsIdParticipantIdsJSONBody defines parameters for PostChatsIdParticipantIds.
type PostChatsIdParticipantIdsJSONBody struct {
	ParticipantID string `json:"participantID"`
}

// PostAccesskeysJSONRequestBody defines body for PostAccesskeys for application/json ContentType.
type PostAccesskeysJSONRequestBody PostAccesskeysJSONBody

// PutAccesskeysIdJSONRequestBody defines body for PutAccesskeysId for application/json ContentType.
type PutAccesskeysIdJSONRequestBody = PutAccesskeysIdJSONBody

// PostActiveflowsJSONRequestBody defines body for PostActiveflows for application/json ContentType.
type PostActiveflowsJSONRequestBody PostActiveflowsJSONBody

// PostAgentsJSONRequestBody defines body for PostAgents for application/json ContentType.
type PostAgentsJSONRequestBody PostAgentsJSONBody

// PutAgentsIdJSONRequestBody defines body for PutAgentsId for application/json ContentType.
type PutAgentsIdJSONRequestBody = PutAgentsIdJSONBody

// PutAgentsIdAddressesJSONRequestBody defines body for PutAgentsIdAddresses for application/json ContentType.
type PutAgentsIdAddressesJSONRequestBody PutAgentsIdAddressesJSONBody

// PutAgentsIdPasswordJSONRequestBody defines body for PutAgentsIdPassword for application/json ContentType.
type PutAgentsIdPasswordJSONRequestBody PutAgentsIdPasswordJSONBody

// PutAgentsIdPermissionJSONRequestBody defines body for PutAgentsIdPermission for application/json ContentType.
type PutAgentsIdPermissionJSONRequestBody = externalRef0.AgentPermission

// PutAgentsIdTagIdsJSONRequestBody defines body for PutAgentsIdTagIds for application/json ContentType.
type PutAgentsIdTagIdsJSONRequestBody PutAgentsIdTagIdsJSONBody

// PostBillingAccountsJSONRequestBody defines body for PostBillingAccounts for application/json ContentType.
type PostBillingAccountsJSONRequestBody PostBillingAccountsJSONBody

// PutBillingAccountsIdJSONRequestBody defines body for PutBillingAccountsId for application/json ContentType.
type PutBillingAccountsIdJSONRequestBody PutBillingAccountsIdJSONBody

// PostBillingAccountsIdBalanceAddForceJSONRequestBody defines body for PostBillingAccountsIdBalanceAddForce for application/json ContentType.
type PostBillingAccountsIdBalanceAddForceJSONRequestBody PostBillingAccountsIdBalanceAddForceJSONBody

// PostBillingAccountsIdBalanceSubtractForceJSONRequestBody defines body for PostBillingAccountsIdBalanceSubtractForce for application/json ContentType.
type PostBillingAccountsIdBalanceSubtractForceJSONRequestBody PostBillingAccountsIdBalanceSubtractForceJSONBody

// PutBillingAccountsIdPaymentInfoJSONRequestBody defines body for PutBillingAccountsIdPaymentInfo for application/json ContentType.
type PutBillingAccountsIdPaymentInfoJSONRequestBody PutBillingAccountsIdPaymentInfoJSONBody

// PostCallsJSONRequestBody defines body for PostCalls for application/json ContentType.
type PostCallsJSONRequestBody PostCallsJSONBody

// PostCampaignsJSONRequestBody defines body for PostCampaigns for application/json ContentType.
type PostCampaignsJSONRequestBody PostCampaignsJSONBody

// PutCampaignsIdJSONRequestBody defines body for PutCampaignsId for application/json ContentType.
type PutCampaignsIdJSONRequestBody PutCampaignsIdJSONBody

// PutCampaignsIdStatusJSONRequestBody defines body for PutCampaignsIdStatus for application/json ContentType.
type PutCampaignsIdStatusJSONRequestBody PutCampaignsIdStatusJSONBody

// PostChatbotsJSONRequestBody defines body for PostChatbots for application/json ContentType.
type PostChatbotsJSONRequestBody PostChatbotsJSONBody

// PutChatbotsIdJSONRequestBody defines body for PutChatbotsId for application/json ContentType.
type PutChatbotsIdJSONRequestBody PutChatbotsIdJSONBody

// PostChatmessagesJSONRequestBody defines body for PostChatmessages for application/json ContentType.
type PostChatmessagesJSONRequestBody PostChatmessagesJSONBody

// PostChatroommessagesJSONRequestBody defines body for PostChatroommessages for application/json ContentType.
type PostChatroommessagesJSONRequestBody PostChatroommessagesJSONBody

// PostChatroomsJSONRequestBody defines body for PostChatrooms for application/json ContentType.
type PostChatroomsJSONRequestBody PostChatroomsJSONBody

// PutChatroomsIdJSONRequestBody defines body for PutChatroomsId for application/json ContentType.
type PutChatroomsIdJSONRequestBody PutChatroomsIdJSONBody

// PostChatsJSONRequestBody defines body for PostChats for application/json ContentType.
type PostChatsJSONRequestBody PostChatsJSONBody

// PutChatsIdJSONRequestBody defines body for PutChatsId for application/json ContentType.
type PutChatsIdJSONRequestBody PutChatsIdJSONBody

// PostChatsIdParticipantIdsJSONRequestBody defines body for PostChatsIdParticipantIds for application/json ContentType.
type PostChatsIdParticipantIdsJSONRequestBody PostChatsIdParticipantIdsJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get list of accesskeys
	// (GET /accesskeys)
	GetAccesskeys(c *gin.Context, params GetAccesskeysParams)
	// Create a new accesskey.
	// (POST /accesskeys)
	PostAccesskeys(c *gin.Context)
	// Delete an accesskey
	// (DELETE /accesskeys/{id})
	DeleteAccesskeysId(c *gin.Context, id string)
	// Get details of an accesskey
	// (GET /accesskeys/{id})
	GetAccesskeysId(c *gin.Context, id string)
	// Update an accesskey
	// (PUT /accesskeys/{id})
	PutAccesskeysId(c *gin.Context, id string)
	// List all activeflows
	// (GET /activeflows)
	GetActiveflows(c *gin.Context, params GetActiveflowsParams)
	// Create a new activeflow
	// (POST /activeflows)
	PostActiveflows(c *gin.Context)
	// Delete an active flow
	// (DELETE /activeflows/{id})
	DeleteActiveflowsId(c *gin.Context, id string)
	// Get an active flow by ID
	// (GET /activeflows/{id})
	GetActiveflowsId(c *gin.Context, id string)
	// Stop an active flow
	// (POST /activeflows/{id}/stop)
	PostActiveflowsIdStop(c *gin.Context, id string)
	// List agents
	// (GET /agents)
	GetAgents(c *gin.Context, params GetAgentsParams)
	// Create a new agent
	// (POST /agents)
	PostAgents(c *gin.Context)
	// Delete the agent
	// (DELETE /agents/{id})
	DeleteAgentsId(c *gin.Context, id string)
	// Get the agent
	// (GET /agents/{id})
	GetAgentsId(c *gin.Context, id string)
	// Update an agent
	// (PUT /agents/{id})
	PutAgentsId(c *gin.Context, id string)
	// Update an agent's addresses
	// (PUT /agents/{id}/addresses)
	PutAgentsIdAddresses(c *gin.Context, id string)
	// Update an agent's password
	// (PUT /agents/{id}/password)
	PutAgentsIdPassword(c *gin.Context, id string)
	// Update an agent's permission
	// (PUT /agents/{id}/permission)
	PutAgentsIdPermission(c *gin.Context, id string)
	// Update an agent's tag IDs
	// (PUT /agents/{id}/tag_ids)
	PutAgentsIdTagIds(c *gin.Context, id string)
	// List available numbers
	// (GET /available_numbers)
	GetAvailableNumbers(c *gin.Context, params GetAvailableNumbersParams)
	// Get list of billing accounts
	// (GET /billing_accounts)
	GetBillingAccounts(c *gin.Context, params GetBillingAccountsParams)
	// Create a new billing account
	// (POST /billing_accounts)
	PostBillingAccounts(c *gin.Context)
	// Delete billing account
	// (DELETE /billing_accounts/{id})
	DeleteBillingAccountsId(c *gin.Context, id openapi_types.UUID)
	// Get detailed billing account info
	// (GET /billing_accounts/{id})
	GetBillingAccountsId(c *gin.Context, id openapi_types.UUID)
	// Update billing account
	// (PUT /billing_accounts/{id})
	PutBillingAccountsId(c *gin.Context, id openapi_types.UUID)
	// Add balance to billing account
	// (POST /billing_accounts/{id}/balance_add_force)
	PostBillingAccountsIdBalanceAddForce(c *gin.Context, id openapi_types.UUID)
	// Subtract balance from billing account
	// (POST /billing_accounts/{id}/balance_subtract_force)
	PostBillingAccountsIdBalanceSubtractForce(c *gin.Context, id openapi_types.UUID)
	// Update billing account's payment info
	// (PUT /billing_accounts/{id}/payment_info)
	PutBillingAccountsIdPaymentInfo(c *gin.Context, id openapi_types.UUID)
	// Get list of calls
	// (GET /calls)
	GetCalls(c *gin.Context, params GetCallsParams)
	// Make an outbound call
	// (POST /calls)
	PostCalls(c *gin.Context)
	// Delete up the call
	// (DELETE /calls/{id})
	DeleteCallsId(c *gin.Context, id string)
	// Get detail call info
	// (GET /calls/{id})
	GetCallsId(c *gin.Context, id string)
	// Hang up the call
	// (POST /calls/{id}/hangup)
	PostCallsIdHangup(c *gin.Context, id string)
	// Unhold the call
	// (DELETE /calls/{id}/hold)
	DeleteCallsIdHold(c *gin.Context, id string)
	// Hold the call
	// (POST /calls/{id}/hold)
	PostCallsIdHold(c *gin.Context, id string)
	// Get media stream for the call
	// (GET /calls/{id}/media_stream)
	GetCallsIdMediaStream(c *gin.Context, id string)
	// Disable Music on Hold (MOH)
	// (DELETE /calls/{id}/moh)
	DeleteCallsIdMoh(c *gin.Context, id string)
	// Enable Music on Hold (MOH)
	// (POST /calls/{id}/moh)
	PostCallsIdMoh(c *gin.Context, id string)
	// Unmute the call
	// (DELETE /calls/{id}/mute)
	DeleteCallsIdMute(c *gin.Context, id string)
	// Mute the call
	// (POST /calls/{id}/mute)
	PostCallsIdMute(c *gin.Context, id string)
	// Un-silence a call
	// (DELETE /calls/{id}/silence)
	DeleteCallsIdSilence(c *gin.Context, id string)
	// Silence a call
	// (POST /calls/{id}/silence)
	PostCallsIdSilence(c *gin.Context, id string)
	// Talk to the call
	// (POST /calls/{id}/talk)
	PostCallsIdTalk(c *gin.Context, id string)
	// Get list of campaign calls
	// (GET /campaigncalls)
	GetCampaigncalls(c *gin.Context, params GetCampaigncallsParams)
	// Delete a campaign call
	// (DELETE /campaigncalls/{id})
	DeleteCampaigncallsId(c *gin.Context, id string)
	// Get campaign call details
	// (GET /campaigncalls/{id})
	GetCampaigncallsId(c *gin.Context, id string)
	// Get a list of campaigns
	// (GET /campaigns)
	GetCampaigns(c *gin.Context, params GetCampaignsParams)
	// Create a new campaign
	// (POST /campaigns)
	PostCampaigns(c *gin.Context)
	// Delete a campaign
	// (DELETE /campaigns/{id})
	DeleteCampaignsId(c *gin.Context, id string)
	// Get campaign details
	// (GET /campaigns/{id})
	GetCampaignsId(c *gin.Context, id string)
	// Update a campaign
	// (PUT /campaigns/{id})
	PutCampaignsId(c *gin.Context, id string)
	// Update campaign status
	// (PUT /campaigns/{id}/status)
	PutCampaignsIdStatus(c *gin.Context, id string)
	// Gets a list of chatbot calls
	// (GET /chatbotcalls)
	GetChatbotcalls(c *gin.Context, params GetChatbotcallsParams)
	// Delete a specific chatbot call
	// (DELETE /chatbotcalls/{id})
	DeleteChatbotcallsId(c *gin.Context, id string)
	// Get details of a specific chatbot call
	// (GET /chatbotcalls/{id})
	GetChatbotcallsId(c *gin.Context, id string)
	// Gets a list of chatbots.
	// (GET /chatbots)
	GetChatbots(c *gin.Context, params GetChatbotsParams)
	// Create a new chatbot.
	// (POST /chatbots)
	PostChatbots(c *gin.Context)
	// Delete a chatbot.
	// (DELETE /chatbots/{id})
	DeleteChatbotsId(c *gin.Context, id string)
	// Get chatbot details.
	// (GET /chatbots/{id})
	GetChatbotsId(c *gin.Context, id string)
	// Update a chatbot.
	// (PUT /chatbots/{id})
	PutChatbotsId(c *gin.Context, id string)
	// Retrieve a list of chat messages
	// (GET /chatmessages)
	GetChatmessages(c *gin.Context, params GetChatmessagesParams)
	// Create a new chat message
	// (POST /chatmessages)
	PostChatmessages(c *gin.Context)
	// Delete a chat message
	// (DELETE /chatmessages/{id})
	DeleteChatmessagesId(c *gin.Context, id string)
	// Retrieve details of a chat message
	// (GET /chatmessages/{id})
	GetChatmessagesId(c *gin.Context, id string)
	// Retrieve a list of chatroom messages
	// (GET /chatroommessages)
	GetChatroommessages(c *gin.Context, params GetChatroommessagesParams)
	// Create a new chatroom message
	// (POST /chatroommessages)
	PostChatroommessages(c *gin.Context)
	// Delete a chatroom message
	// (DELETE /chatroommessages/{id})
	DeleteChatroommessagesId(c *gin.Context, id string)
	// Get details of a specific chatroom message
	// (GET /chatroommessages/{id})
	GetChatroommessagesId(c *gin.Context, id string)
	// Gets a list of chatrooms.
	// (GET /chatrooms)
	GetChatrooms(c *gin.Context, params GetChatroomsParams)
	// Create a new chatroom.
	// (POST /chatrooms)
	PostChatrooms(c *gin.Context)
	// Delete a chatroom.
	// (DELETE /chatrooms/{id})
	DeleteChatroomsId(c *gin.Context, id string)
	// Get chatroom details.
	// (GET /chatrooms/{id})
	GetChatroomsId(c *gin.Context, id string)
	// Update a chatroom.
	// (PUT /chatrooms/{id})
	PutChatroomsId(c *gin.Context, id string)
	// Gets a list of chats.
	// (GET /chats)
	GetChats(c *gin.Context, params GetChatsParams)
	// Create a new chat.
	// (POST /chats)
	PostChats(c *gin.Context)
	// Delete a chat.
	// (DELETE /chats/{id})
	DeleteChatsId(c *gin.Context, id string)
	// Get details of a specific chat.
	// (GET /chats/{id})
	GetChatsId(c *gin.Context, id string)
	// Update a chat.
	// (PUT /chats/{id})
	PutChatsId(c *gin.Context, id string)
	// Add a participant to a chat.
	// (POST /chats/{id}/participant_ids)
	PostChatsIdParticipantIds(c *gin.Context, id string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetAccesskeys operation middleware
func (siw *ServerInterfaceWrapper) GetAccesskeys(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAccesskeysParams

	// ------------- Optional query parameter "page_size" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_size", c.Request.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page_size: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "page_token" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_token", c.Request.URL.Query(), &params.PageToken)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page_token: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetAccesskeys(c, params)
}

// PostAccesskeys operation middleware
func (siw *ServerInterfaceWrapper) PostAccesskeys(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostAccesskeys(c)
}

// DeleteAccesskeysId operation middleware
func (siw *ServerInterfaceWrapper) DeleteAccesskeysId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteAccesskeysId(c, id)
}

// GetAccesskeysId operation middleware
func (siw *ServerInterfaceWrapper) GetAccesskeysId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetAccesskeysId(c, id)
}

// PutAccesskeysId operation middleware
func (siw *ServerInterfaceWrapper) PutAccesskeysId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutAccesskeysId(c, id)
}

// GetActiveflows operation middleware
func (siw *ServerInterfaceWrapper) GetActiveflows(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetActiveflowsParams

	// ------------- Optional query parameter "page_size" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_size", c.Request.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page_size: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "page_token" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_token", c.Request.URL.Query(), &params.PageToken)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page_token: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetActiveflows(c, params)
}

// PostActiveflows operation middleware
func (siw *ServerInterfaceWrapper) PostActiveflows(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostActiveflows(c)
}

// DeleteActiveflowsId operation middleware
func (siw *ServerInterfaceWrapper) DeleteActiveflowsId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteActiveflowsId(c, id)
}

// GetActiveflowsId operation middleware
func (siw *ServerInterfaceWrapper) GetActiveflowsId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetActiveflowsId(c, id)
}

// PostActiveflowsIdStop operation middleware
func (siw *ServerInterfaceWrapper) PostActiveflowsIdStop(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostActiveflowsIdStop(c, id)
}

// GetAgents operation middleware
func (siw *ServerInterfaceWrapper) GetAgents(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAgentsParams

	// ------------- Optional query parameter "page_size" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_size", c.Request.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page_size: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "page_token" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_token", c.Request.URL.Query(), &params.PageToken)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page_token: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "tag_ids" -------------

	err = runtime.BindQueryParameter("form", true, false, "tag_ids", c.Request.URL.Query(), &params.TagIds)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter tag_ids: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, false, "status", c.Request.URL.Query(), &params.Status)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter status: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetAgents(c, params)
}

// PostAgents operation middleware
func (siw *ServerInterfaceWrapper) PostAgents(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostAgents(c)
}

// DeleteAgentsId operation middleware
func (siw *ServerInterfaceWrapper) DeleteAgentsId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteAgentsId(c, id)
}

// GetAgentsId operation middleware
func (siw *ServerInterfaceWrapper) GetAgentsId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetAgentsId(c, id)
}

// PutAgentsId operation middleware
func (siw *ServerInterfaceWrapper) PutAgentsId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutAgentsId(c, id)
}

// PutAgentsIdAddresses operation middleware
func (siw *ServerInterfaceWrapper) PutAgentsIdAddresses(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutAgentsIdAddresses(c, id)
}

// PutAgentsIdPassword operation middleware
func (siw *ServerInterfaceWrapper) PutAgentsIdPassword(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutAgentsIdPassword(c, id)
}

// PutAgentsIdPermission operation middleware
func (siw *ServerInterfaceWrapper) PutAgentsIdPermission(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutAgentsIdPermission(c, id)
}

// PutAgentsIdTagIds operation middleware
func (siw *ServerInterfaceWrapper) PutAgentsIdTagIds(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutAgentsIdTagIds(c, id)
}

// GetAvailableNumbers operation middleware
func (siw *ServerInterfaceWrapper) GetAvailableNumbers(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAvailableNumbersParams

	// ------------- Optional query parameter "page_size" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_size", c.Request.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page_size: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Required query parameter "country_code" -------------

	if paramValue := c.Query("country_code"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument country_code is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "country_code", c.Request.URL.Query(), &params.CountryCode)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter country_code: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetAvailableNumbers(c, params)
}

// GetBillingAccounts operation middleware
func (siw *ServerInterfaceWrapper) GetBillingAccounts(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetBillingAccountsParams

	// ------------- Optional query parameter "page_size" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_size", c.Request.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page_size: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "page_token" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_token", c.Request.URL.Query(), &params.PageToken)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page_token: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetBillingAccounts(c, params)
}

// PostBillingAccounts operation middleware
func (siw *ServerInterfaceWrapper) PostBillingAccounts(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostBillingAccounts(c)
}

// DeleteBillingAccountsId operation middleware
func (siw *ServerInterfaceWrapper) DeleteBillingAccountsId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteBillingAccountsId(c, id)
}

// GetBillingAccountsId operation middleware
func (siw *ServerInterfaceWrapper) GetBillingAccountsId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetBillingAccountsId(c, id)
}

// PutBillingAccountsId operation middleware
func (siw *ServerInterfaceWrapper) PutBillingAccountsId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutBillingAccountsId(c, id)
}

// PostBillingAccountsIdBalanceAddForce operation middleware
func (siw *ServerInterfaceWrapper) PostBillingAccountsIdBalanceAddForce(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostBillingAccountsIdBalanceAddForce(c, id)
}

// PostBillingAccountsIdBalanceSubtractForce operation middleware
func (siw *ServerInterfaceWrapper) PostBillingAccountsIdBalanceSubtractForce(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostBillingAccountsIdBalanceSubtractForce(c, id)
}

// PutBillingAccountsIdPaymentInfo operation middleware
func (siw *ServerInterfaceWrapper) PutBillingAccountsIdPaymentInfo(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutBillingAccountsIdPaymentInfo(c, id)
}

// GetCalls operation middleware
func (siw *ServerInterfaceWrapper) GetCalls(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetCallsParams

	// ------------- Optional query parameter "page_size" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_size", c.Request.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page_size: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "page_token" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_token", c.Request.URL.Query(), &params.PageToken)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page_token: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetCalls(c, params)
}

// PostCalls operation middleware
func (siw *ServerInterfaceWrapper) PostCalls(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostCalls(c)
}

// DeleteCallsId operation middleware
func (siw *ServerInterfaceWrapper) DeleteCallsId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteCallsId(c, id)
}

// GetCallsId operation middleware
func (siw *ServerInterfaceWrapper) GetCallsId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetCallsId(c, id)
}

// PostCallsIdHangup operation middleware
func (siw *ServerInterfaceWrapper) PostCallsIdHangup(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostCallsIdHangup(c, id)
}

// DeleteCallsIdHold operation middleware
func (siw *ServerInterfaceWrapper) DeleteCallsIdHold(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteCallsIdHold(c, id)
}

// PostCallsIdHold operation middleware
func (siw *ServerInterfaceWrapper) PostCallsIdHold(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostCallsIdHold(c, id)
}

// GetCallsIdMediaStream operation middleware
func (siw *ServerInterfaceWrapper) GetCallsIdMediaStream(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetCallsIdMediaStream(c, id)
}

// DeleteCallsIdMoh operation middleware
func (siw *ServerInterfaceWrapper) DeleteCallsIdMoh(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteCallsIdMoh(c, id)
}

// PostCallsIdMoh operation middleware
func (siw *ServerInterfaceWrapper) PostCallsIdMoh(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostCallsIdMoh(c, id)
}

// DeleteCallsIdMute operation middleware
func (siw *ServerInterfaceWrapper) DeleteCallsIdMute(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteCallsIdMute(c, id)
}

// PostCallsIdMute operation middleware
func (siw *ServerInterfaceWrapper) PostCallsIdMute(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostCallsIdMute(c, id)
}

// DeleteCallsIdSilence operation middleware
func (siw *ServerInterfaceWrapper) DeleteCallsIdSilence(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteCallsIdSilence(c, id)
}

// PostCallsIdSilence operation middleware
func (siw *ServerInterfaceWrapper) PostCallsIdSilence(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostCallsIdSilence(c, id)
}

// PostCallsIdTalk operation middleware
func (siw *ServerInterfaceWrapper) PostCallsIdTalk(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostCallsIdTalk(c, id)
}

// GetCampaigncalls operation middleware
func (siw *ServerInterfaceWrapper) GetCampaigncalls(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetCampaigncallsParams

	// ------------- Optional query parameter "page_size" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_size", c.Request.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page_size: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "page_token" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_token", c.Request.URL.Query(), &params.PageToken)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page_token: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetCampaigncalls(c, params)
}

// DeleteCampaigncallsId operation middleware
func (siw *ServerInterfaceWrapper) DeleteCampaigncallsId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteCampaigncallsId(c, id)
}

// GetCampaigncallsId operation middleware
func (siw *ServerInterfaceWrapper) GetCampaigncallsId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetCampaigncallsId(c, id)
}

// GetCampaigns operation middleware
func (siw *ServerInterfaceWrapper) GetCampaigns(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetCampaignsParams

	// ------------- Optional query parameter "page_size" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_size", c.Request.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page_size: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "page_token" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_token", c.Request.URL.Query(), &params.PageToken)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page_token: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetCampaigns(c, params)
}

// PostCampaigns operation middleware
func (siw *ServerInterfaceWrapper) PostCampaigns(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostCampaigns(c)
}

// DeleteCampaignsId operation middleware
func (siw *ServerInterfaceWrapper) DeleteCampaignsId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteCampaignsId(c, id)
}

// GetCampaignsId operation middleware
func (siw *ServerInterfaceWrapper) GetCampaignsId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetCampaignsId(c, id)
}

// PutCampaignsId operation middleware
func (siw *ServerInterfaceWrapper) PutCampaignsId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutCampaignsId(c, id)
}

// PutCampaignsIdStatus operation middleware
func (siw *ServerInterfaceWrapper) PutCampaignsIdStatus(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutCampaignsIdStatus(c, id)
}

// GetChatbotcalls operation middleware
func (siw *ServerInterfaceWrapper) GetChatbotcalls(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetChatbotcallsParams

	// ------------- Optional query parameter "page_size" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_size", c.Request.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page_size: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "page_token" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_token", c.Request.URL.Query(), &params.PageToken)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page_token: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetChatbotcalls(c, params)
}

// DeleteChatbotcallsId operation middleware
func (siw *ServerInterfaceWrapper) DeleteChatbotcallsId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteChatbotcallsId(c, id)
}

// GetChatbotcallsId operation middleware
func (siw *ServerInterfaceWrapper) GetChatbotcallsId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetChatbotcallsId(c, id)
}

// GetChatbots operation middleware
func (siw *ServerInterfaceWrapper) GetChatbots(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetChatbotsParams

	// ------------- Optional query parameter "page_size" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_size", c.Request.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page_size: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "page_token" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_token", c.Request.URL.Query(), &params.PageToken)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page_token: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetChatbots(c, params)
}

// PostChatbots operation middleware
func (siw *ServerInterfaceWrapper) PostChatbots(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostChatbots(c)
}

// DeleteChatbotsId operation middleware
func (siw *ServerInterfaceWrapper) DeleteChatbotsId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteChatbotsId(c, id)
}

// GetChatbotsId operation middleware
func (siw *ServerInterfaceWrapper) GetChatbotsId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetChatbotsId(c, id)
}

// PutChatbotsId operation middleware
func (siw *ServerInterfaceWrapper) PutChatbotsId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutChatbotsId(c, id)
}

// GetChatmessages operation middleware
func (siw *ServerInterfaceWrapper) GetChatmessages(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetChatmessagesParams

	// ------------- Optional query parameter "page_size" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_size", c.Request.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page_size: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "page_token" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_token", c.Request.URL.Query(), &params.PageToken)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page_token: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetChatmessages(c, params)
}

// PostChatmessages operation middleware
func (siw *ServerInterfaceWrapper) PostChatmessages(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostChatmessages(c)
}

// DeleteChatmessagesId operation middleware
func (siw *ServerInterfaceWrapper) DeleteChatmessagesId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteChatmessagesId(c, id)
}

// GetChatmessagesId operation middleware
func (siw *ServerInterfaceWrapper) GetChatmessagesId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetChatmessagesId(c, id)
}

// GetChatroommessages operation middleware
func (siw *ServerInterfaceWrapper) GetChatroommessages(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetChatroommessagesParams

	// ------------- Optional query parameter "page_size" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_size", c.Request.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page_size: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "page_token" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_token", c.Request.URL.Query(), &params.PageToken)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page_token: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Required query parameter "chatroom_id" -------------

	if paramValue := c.Query("chatroom_id"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument chatroom_id is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "chatroom_id", c.Request.URL.Query(), &params.ChatroomId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter chatroom_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetChatroommessages(c, params)
}

// PostChatroommessages operation middleware
func (siw *ServerInterfaceWrapper) PostChatroommessages(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostChatroommessages(c)
}

// DeleteChatroommessagesId operation middleware
func (siw *ServerInterfaceWrapper) DeleteChatroommessagesId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteChatroommessagesId(c, id)
}

// GetChatroommessagesId operation middleware
func (siw *ServerInterfaceWrapper) GetChatroommessagesId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetChatroommessagesId(c, id)
}

// GetChatrooms operation middleware
func (siw *ServerInterfaceWrapper) GetChatrooms(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetChatroomsParams

	// ------------- Optional query parameter "page_size" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_size", c.Request.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page_size: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "page_token" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_token", c.Request.URL.Query(), &params.PageToken)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page_token: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Required query parameter "owner_id" -------------

	if paramValue := c.Query("owner_id"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument owner_id is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "owner_id", c.Request.URL.Query(), &params.OwnerId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter owner_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetChatrooms(c, params)
}

// PostChatrooms operation middleware
func (siw *ServerInterfaceWrapper) PostChatrooms(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostChatrooms(c)
}

// DeleteChatroomsId operation middleware
func (siw *ServerInterfaceWrapper) DeleteChatroomsId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteChatroomsId(c, id)
}

// GetChatroomsId operation middleware
func (siw *ServerInterfaceWrapper) GetChatroomsId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetChatroomsId(c, id)
}

// PutChatroomsId operation middleware
func (siw *ServerInterfaceWrapper) PutChatroomsId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutChatroomsId(c, id)
}

// GetChats operation middleware
func (siw *ServerInterfaceWrapper) GetChats(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetChatsParams

	// ------------- Optional query parameter "page_size" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_size", c.Request.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page_size: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "page_token" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_token", c.Request.URL.Query(), &params.PageToken)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page_token: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetChats(c, params)
}

// PostChats operation middleware
func (siw *ServerInterfaceWrapper) PostChats(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostChats(c)
}

// DeleteChatsId operation middleware
func (siw *ServerInterfaceWrapper) DeleteChatsId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteChatsId(c, id)
}

// GetChatsId operation middleware
func (siw *ServerInterfaceWrapper) GetChatsId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetChatsId(c, id)
}

// PutChatsId operation middleware
func (siw *ServerInterfaceWrapper) PutChatsId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutChatsId(c, id)
}

// PostChatsIdParticipantIds operation middleware
func (siw *ServerInterfaceWrapper) PostChatsIdParticipantIds(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostChatsIdParticipantIds(c, id)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/accesskeys", wrapper.GetAccesskeys)
	router.POST(options.BaseURL+"/accesskeys", wrapper.PostAccesskeys)
	router.DELETE(options.BaseURL+"/accesskeys/:id", wrapper.DeleteAccesskeysId)
	router.GET(options.BaseURL+"/accesskeys/:id", wrapper.GetAccesskeysId)
	router.PUT(options.BaseURL+"/accesskeys/:id", wrapper.PutAccesskeysId)
	router.GET(options.BaseURL+"/activeflows", wrapper.GetActiveflows)
	router.POST(options.BaseURL+"/activeflows", wrapper.PostActiveflows)
	router.DELETE(options.BaseURL+"/activeflows/:id", wrapper.DeleteActiveflowsId)
	router.GET(options.BaseURL+"/activeflows/:id", wrapper.GetActiveflowsId)
	router.POST(options.BaseURL+"/activeflows/:id/stop", wrapper.PostActiveflowsIdStop)
	router.GET(options.BaseURL+"/agents", wrapper.GetAgents)
	router.POST(options.BaseURL+"/agents", wrapper.PostAgents)
	router.DELETE(options.BaseURL+"/agents/:id", wrapper.DeleteAgentsId)
	router.GET(options.BaseURL+"/agents/:id", wrapper.GetAgentsId)
	router.PUT(options.BaseURL+"/agents/:id", wrapper.PutAgentsId)
	router.PUT(options.BaseURL+"/agents/:id/addresses", wrapper.PutAgentsIdAddresses)
	router.PUT(options.BaseURL+"/agents/:id/password", wrapper.PutAgentsIdPassword)
	router.PUT(options.BaseURL+"/agents/:id/permission", wrapper.PutAgentsIdPermission)
	router.PUT(options.BaseURL+"/agents/:id/tag_ids", wrapper.PutAgentsIdTagIds)
	router.GET(options.BaseURL+"/available_numbers", wrapper.GetAvailableNumbers)
	router.GET(options.BaseURL+"/billing_accounts", wrapper.GetBillingAccounts)
	router.POST(options.BaseURL+"/billing_accounts", wrapper.PostBillingAccounts)
	router.DELETE(options.BaseURL+"/billing_accounts/:id", wrapper.DeleteBillingAccountsId)
	router.GET(options.BaseURL+"/billing_accounts/:id", wrapper.GetBillingAccountsId)
	router.PUT(options.BaseURL+"/billing_accounts/:id", wrapper.PutBillingAccountsId)
	router.POST(options.BaseURL+"/billing_accounts/:id/balance_add_force", wrapper.PostBillingAccountsIdBalanceAddForce)
	router.POST(options.BaseURL+"/billing_accounts/:id/balance_subtract_force", wrapper.PostBillingAccountsIdBalanceSubtractForce)
	router.PUT(options.BaseURL+"/billing_accounts/:id/payment_info", wrapper.PutBillingAccountsIdPaymentInfo)
	router.GET(options.BaseURL+"/calls", wrapper.GetCalls)
	router.POST(options.BaseURL+"/calls", wrapper.PostCalls)
	router.DELETE(options.BaseURL+"/calls/:id", wrapper.DeleteCallsId)
	router.GET(options.BaseURL+"/calls/:id", wrapper.GetCallsId)
	router.POST(options.BaseURL+"/calls/:id/hangup", wrapper.PostCallsIdHangup)
	router.DELETE(options.BaseURL+"/calls/:id/hold", wrapper.DeleteCallsIdHold)
	router.POST(options.BaseURL+"/calls/:id/hold", wrapper.PostCallsIdHold)
	router.GET(options.BaseURL+"/calls/:id/media_stream", wrapper.GetCallsIdMediaStream)
	router.DELETE(options.BaseURL+"/calls/:id/moh", wrapper.DeleteCallsIdMoh)
	router.POST(options.BaseURL+"/calls/:id/moh", wrapper.PostCallsIdMoh)
	router.DELETE(options.BaseURL+"/calls/:id/mute", wrapper.DeleteCallsIdMute)
	router.POST(options.BaseURL+"/calls/:id/mute", wrapper.PostCallsIdMute)
	router.DELETE(options.BaseURL+"/calls/:id/silence", wrapper.DeleteCallsIdSilence)
	router.POST(options.BaseURL+"/calls/:id/silence", wrapper.PostCallsIdSilence)
	router.POST(options.BaseURL+"/calls/:id/talk", wrapper.PostCallsIdTalk)
	router.GET(options.BaseURL+"/campaigncalls", wrapper.GetCampaigncalls)
	router.DELETE(options.BaseURL+"/campaigncalls/:id", wrapper.DeleteCampaigncallsId)
	router.GET(options.BaseURL+"/campaigncalls/:id", wrapper.GetCampaigncallsId)
	router.GET(options.BaseURL+"/campaigns", wrapper.GetCampaigns)
	router.POST(options.BaseURL+"/campaigns", wrapper.PostCampaigns)
	router.DELETE(options.BaseURL+"/campaigns/:id", wrapper.DeleteCampaignsId)
	router.GET(options.BaseURL+"/campaigns/:id", wrapper.GetCampaignsId)
	router.PUT(options.BaseURL+"/campaigns/:id", wrapper.PutCampaignsId)
	router.PUT(options.BaseURL+"/campaigns/:id/status", wrapper.PutCampaignsIdStatus)
	router.GET(options.BaseURL+"/chatbotcalls", wrapper.GetChatbotcalls)
	router.DELETE(options.BaseURL+"/chatbotcalls/:id", wrapper.DeleteChatbotcallsId)
	router.GET(options.BaseURL+"/chatbotcalls/:id", wrapper.GetChatbotcallsId)
	router.GET(options.BaseURL+"/chatbots", wrapper.GetChatbots)
	router.POST(options.BaseURL+"/chatbots", wrapper.PostChatbots)
	router.DELETE(options.BaseURL+"/chatbots/:id", wrapper.DeleteChatbotsId)
	router.GET(options.BaseURL+"/chatbots/:id", wrapper.GetChatbotsId)
	router.PUT(options.BaseURL+"/chatbots/:id", wrapper.PutChatbotsId)
	router.GET(options.BaseURL+"/chatmessages", wrapper.GetChatmessages)
	router.POST(options.BaseURL+"/chatmessages", wrapper.PostChatmessages)
	router.DELETE(options.BaseURL+"/chatmessages/:id", wrapper.DeleteChatmessagesId)
	router.GET(options.BaseURL+"/chatmessages/:id", wrapper.GetChatmessagesId)
	router.GET(options.BaseURL+"/chatroommessages", wrapper.GetChatroommessages)
	router.POST(options.BaseURL+"/chatroommessages", wrapper.PostChatroommessages)
	router.DELETE(options.BaseURL+"/chatroommessages/:id", wrapper.DeleteChatroommessagesId)
	router.GET(options.BaseURL+"/chatroommessages/:id", wrapper.GetChatroommessagesId)
	router.GET(options.BaseURL+"/chatrooms", wrapper.GetChatrooms)
	router.POST(options.BaseURL+"/chatrooms", wrapper.PostChatrooms)
	router.DELETE(options.BaseURL+"/chatrooms/:id", wrapper.DeleteChatroomsId)
	router.GET(options.BaseURL+"/chatrooms/:id", wrapper.GetChatroomsId)
	router.PUT(options.BaseURL+"/chatrooms/:id", wrapper.PutChatroomsId)
	router.GET(options.BaseURL+"/chats", wrapper.GetChats)
	router.POST(options.BaseURL+"/chats", wrapper.PostChats)
	router.DELETE(options.BaseURL+"/chats/:id", wrapper.DeleteChatsId)
	router.GET(options.BaseURL+"/chats/:id", wrapper.GetChatsId)
	router.PUT(options.BaseURL+"/chats/:id", wrapper.PutChatsId)
	router.POST(options.BaseURL+"/chats/:id/participant_ids", wrapper.PostChatsIdParticipantIds)
}

type GetAccesskeysRequestObject struct {
	Params GetAccesskeysParams
}

type GetAccesskeysResponseObject interface {
	VisitGetAccesskeysResponse(w http.ResponseWriter) error
}

type GetAccesskeys200JSONResponse struct {
	// NextPageToken The token for next pagination.
	NextPageToken *string                   `json:"next_page_token,omitempty"`
	Result        *[]externalRef7.Accesskey `json:"result,omitempty"`
}

func (response GetAccesskeys200JSONResponse) VisitGetAccesskeysResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostAccesskeysRequestObject struct {
	Body *PostAccesskeysJSONRequestBody
}

type PostAccesskeysResponseObject interface {
	VisitPostAccesskeysResponse(w http.ResponseWriter) error
}

type PostAccesskeys201JSONResponse externalRef7.Accesskey

func (response PostAccesskeys201JSONResponse) VisitPostAccesskeysResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type DeleteAccesskeysIdRequestObject struct {
	Id string `json:"id"`
}

type DeleteAccesskeysIdResponseObject interface {
	VisitDeleteAccesskeysIdResponse(w http.ResponseWriter) error
}

type DeleteAccesskeysId204Response struct {
}

func (response DeleteAccesskeysId204Response) VisitDeleteAccesskeysIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type GetAccesskeysIdRequestObject struct {
	Id string `json:"id"`
}

type GetAccesskeysIdResponseObject interface {
	VisitGetAccesskeysIdResponse(w http.ResponseWriter) error
}

type GetAccesskeysId200JSONResponse externalRef7.Accesskey

func (response GetAccesskeysId200JSONResponse) VisitGetAccesskeysIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PutAccesskeysIdRequestObject struct {
	Id   string `json:"id"`
	Body *PutAccesskeysIdJSONRequestBody
}

type PutAccesskeysIdResponseObject interface {
	VisitPutAccesskeysIdResponse(w http.ResponseWriter) error
}

type PutAccesskeysId200JSONResponse externalRef7.Accesskey

func (response PutAccesskeysId200JSONResponse) VisitPutAccesskeysIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetActiveflowsRequestObject struct {
	Params GetActiveflowsParams
}

type GetActiveflowsResponseObject interface {
	VisitGetActiveflowsResponse(w http.ResponseWriter) error
}

type GetActiveflows200JSONResponse struct {
	// NextPageToken The token for next pagination.
	NextPageToken *string                    `json:"next_page_token,omitempty"`
	Result        *[]externalRef8.Activeflow `json:"result,omitempty"`
}

func (response GetActiveflows200JSONResponse) VisitGetActiveflowsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetActiveflows500Response struct {
}

func (response GetActiveflows500Response) VisitGetActiveflowsResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type PostActiveflowsRequestObject struct {
	Body *PostActiveflowsJSONRequestBody
}

type PostActiveflowsResponseObject interface {
	VisitPostActiveflowsResponse(w http.ResponseWriter) error
}

type PostActiveflows201JSONResponse externalRef8.Activeflow

func (response PostActiveflows201JSONResponse) VisitPostActiveflowsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type PostActiveflows400Response struct {
}

func (response PostActiveflows400Response) VisitPostActiveflowsResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type DeleteActiveflowsIdRequestObject struct {
	Id string `json:"id"`
}

type DeleteActiveflowsIdResponseObject interface {
	VisitDeleteActiveflowsIdResponse(w http.ResponseWriter) error
}

type DeleteActiveflowsId204Response struct {
}

func (response DeleteActiveflowsId204Response) VisitDeleteActiveflowsIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteActiveflowsId404Response struct {
}

func (response DeleteActiveflowsId404Response) VisitDeleteActiveflowsIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type GetActiveflowsIdRequestObject struct {
	Id string `json:"id"`
}

type GetActiveflowsIdResponseObject interface {
	VisitGetActiveflowsIdResponse(w http.ResponseWriter) error
}

type GetActiveflowsId200JSONResponse externalRef8.Activeflow

func (response GetActiveflowsId200JSONResponse) VisitGetActiveflowsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetActiveflowsId404Response struct {
}

func (response GetActiveflowsId404Response) VisitGetActiveflowsIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type PostActiveflowsIdStopRequestObject struct {
	Id string `json:"id"`
}

type PostActiveflowsIdStopResponseObject interface {
	VisitPostActiveflowsIdStopResponse(w http.ResponseWriter) error
}

type PostActiveflowsIdStop200JSONResponse externalRef8.Activeflow

func (response PostActiveflowsIdStop200JSONResponse) VisitPostActiveflowsIdStopResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostActiveflowsIdStop400Response struct {
}

func (response PostActiveflowsIdStop400Response) VisitPostActiveflowsIdStopResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type PostActiveflowsIdStop404Response struct {
}

func (response PostActiveflowsIdStop404Response) VisitPostActiveflowsIdStopResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type GetAgentsRequestObject struct {
	Params GetAgentsParams
}

type GetAgentsResponseObject interface {
	VisitGetAgentsResponse(w http.ResponseWriter) error
}

type GetAgents200JSONResponse struct {
	// NextPageToken The token for next pagination.
	NextPageToken *string               `json:"next_page_token,omitempty"`
	Result        *[]externalRef0.Agent `json:"result,omitempty"`
}

func (response GetAgents200JSONResponse) VisitGetAgentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostAgentsRequestObject struct {
	Body *PostAgentsJSONRequestBody
}

type PostAgentsResponseObject interface {
	VisitPostAgentsResponse(w http.ResponseWriter) error
}

type PostAgents201JSONResponse externalRef0.Agent

func (response PostAgents201JSONResponse) VisitPostAgentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type PostAgents400Response struct {
}

func (response PostAgents400Response) VisitPostAgentsResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type DeleteAgentsIdRequestObject struct {
	Id string `json:"id"`
}

type DeleteAgentsIdResponseObject interface {
	VisitDeleteAgentsIdResponse(w http.ResponseWriter) error
}

type DeleteAgentsId200JSONResponse externalRef0.Agent

func (response DeleteAgentsId200JSONResponse) VisitDeleteAgentsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetAgentsIdRequestObject struct {
	Id string `json:"id"`
}

type GetAgentsIdResponseObject interface {
	VisitGetAgentsIdResponse(w http.ResponseWriter) error
}

type GetAgentsId200JSONResponse externalRef0.Agent

func (response GetAgentsId200JSONResponse) VisitGetAgentsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PutAgentsIdRequestObject struct {
	Id   string `json:"id"`
	Body *PutAgentsIdJSONRequestBody
}

type PutAgentsIdResponseObject interface {
	VisitPutAgentsIdResponse(w http.ResponseWriter) error
}

type PutAgentsId200JSONResponse externalRef0.Agent

func (response PutAgentsId200JSONResponse) VisitPutAgentsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PutAgentsIdAddressesRequestObject struct {
	Id   string `json:"id"`
	Body *PutAgentsIdAddressesJSONRequestBody
}

type PutAgentsIdAddressesResponseObject interface {
	VisitPutAgentsIdAddressesResponse(w http.ResponseWriter) error
}

type PutAgentsIdAddresses200JSONResponse externalRef0.Agent

func (response PutAgentsIdAddresses200JSONResponse) VisitPutAgentsIdAddressesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PutAgentsIdPasswordRequestObject struct {
	Id   string `json:"id"`
	Body *PutAgentsIdPasswordJSONRequestBody
}

type PutAgentsIdPasswordResponseObject interface {
	VisitPutAgentsIdPasswordResponse(w http.ResponseWriter) error
}

type PutAgentsIdPassword200JSONResponse externalRef0.Agent

func (response PutAgentsIdPassword200JSONResponse) VisitPutAgentsIdPasswordResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PutAgentsIdPermissionRequestObject struct {
	Id   string `json:"id"`
	Body *PutAgentsIdPermissionJSONRequestBody
}

type PutAgentsIdPermissionResponseObject interface {
	VisitPutAgentsIdPermissionResponse(w http.ResponseWriter) error
}

type PutAgentsIdPermission200JSONResponse externalRef0.Agent

func (response PutAgentsIdPermission200JSONResponse) VisitPutAgentsIdPermissionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PutAgentsIdTagIdsRequestObject struct {
	Id   string `json:"id"`
	Body *PutAgentsIdTagIdsJSONRequestBody
}

type PutAgentsIdTagIdsResponseObject interface {
	VisitPutAgentsIdTagIdsResponse(w http.ResponseWriter) error
}

type PutAgentsIdTagIds200JSONResponse externalRef0.Agent

func (response PutAgentsIdTagIds200JSONResponse) VisitPutAgentsIdTagIdsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetAvailableNumbersRequestObject struct {
	Params GetAvailableNumbersParams
}

type GetAvailableNumbersResponseObject interface {
	VisitGetAvailableNumbersResponse(w http.ResponseWriter) error
}

type GetAvailableNumbers200JSONResponse struct {
	Result *[]externalRef9.AvailableNumber `json:"result,omitempty"`
}

func (response GetAvailableNumbers200JSONResponse) VisitGetAvailableNumbersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetAvailableNumbers400Response struct {
}

func (response GetAvailableNumbers400Response) VisitGetAvailableNumbersResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type GetBillingAccountsRequestObject struct {
	Params GetBillingAccountsParams
}

type GetBillingAccountsResponseObject interface {
	VisitGetBillingAccountsResponse(w http.ResponseWriter) error
}

type GetBillingAccounts200JSONResponse struct {
	// NextPageToken The token for next pagination.
	NextPageToken *string                 `json:"next_page_token,omitempty"`
	Result        *[]externalRef1.Account `json:"result,omitempty"`
}

func (response GetBillingAccounts200JSONResponse) VisitGetBillingAccountsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostBillingAccountsRequestObject struct {
	Body *PostBillingAccountsJSONRequestBody
}

type PostBillingAccountsResponseObject interface {
	VisitPostBillingAccountsResponse(w http.ResponseWriter) error
}

type PostBillingAccounts200JSONResponse externalRef1.Account

func (response PostBillingAccounts200JSONResponse) VisitPostBillingAccountsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteBillingAccountsIdRequestObject struct {
	Id openapi_types.UUID `json:"id"`
}

type DeleteBillingAccountsIdResponseObject interface {
	VisitDeleteBillingAccountsIdResponse(w http.ResponseWriter) error
}

type DeleteBillingAccountsId200JSONResponse externalRef1.Account

func (response DeleteBillingAccountsId200JSONResponse) VisitDeleteBillingAccountsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetBillingAccountsIdRequestObject struct {
	Id openapi_types.UUID `json:"id"`
}

type GetBillingAccountsIdResponseObject interface {
	VisitGetBillingAccountsIdResponse(w http.ResponseWriter) error
}

type GetBillingAccountsId200JSONResponse externalRef1.Account

func (response GetBillingAccountsId200JSONResponse) VisitGetBillingAccountsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PutBillingAccountsIdRequestObject struct {
	Id   openapi_types.UUID `json:"id"`
	Body *PutBillingAccountsIdJSONRequestBody
}

type PutBillingAccountsIdResponseObject interface {
	VisitPutBillingAccountsIdResponse(w http.ResponseWriter) error
}

type PutBillingAccountsId200JSONResponse externalRef1.Account

func (response PutBillingAccountsId200JSONResponse) VisitPutBillingAccountsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostBillingAccountsIdBalanceAddForceRequestObject struct {
	Id   openapi_types.UUID `json:"id"`
	Body *PostBillingAccountsIdBalanceAddForceJSONRequestBody
}

type PostBillingAccountsIdBalanceAddForceResponseObject interface {
	VisitPostBillingAccountsIdBalanceAddForceResponse(w http.ResponseWriter) error
}

type PostBillingAccountsIdBalanceAddForce200JSONResponse externalRef1.Account

func (response PostBillingAccountsIdBalanceAddForce200JSONResponse) VisitPostBillingAccountsIdBalanceAddForceResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostBillingAccountsIdBalanceSubtractForceRequestObject struct {
	Id   openapi_types.UUID `json:"id"`
	Body *PostBillingAccountsIdBalanceSubtractForceJSONRequestBody
}

type PostBillingAccountsIdBalanceSubtractForceResponseObject interface {
	VisitPostBillingAccountsIdBalanceSubtractForceResponse(w http.ResponseWriter) error
}

type PostBillingAccountsIdBalanceSubtractForce200JSONResponse externalRef1.Account

func (response PostBillingAccountsIdBalanceSubtractForce200JSONResponse) VisitPostBillingAccountsIdBalanceSubtractForceResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PutBillingAccountsIdPaymentInfoRequestObject struct {
	Id   openapi_types.UUID `json:"id"`
	Body *PutBillingAccountsIdPaymentInfoJSONRequestBody
}

type PutBillingAccountsIdPaymentInfoResponseObject interface {
	VisitPutBillingAccountsIdPaymentInfoResponse(w http.ResponseWriter) error
}

type PutBillingAccountsIdPaymentInfo200JSONResponse externalRef1.Account

func (response PutBillingAccountsIdPaymentInfo200JSONResponse) VisitPutBillingAccountsIdPaymentInfoResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetCallsRequestObject struct {
	Params GetCallsParams
}

type GetCallsResponseObject interface {
	VisitGetCallsResponse(w http.ResponseWriter) error
}

type GetCalls200JSONResponse struct {
	// NextPageToken The token for next pagination.
	NextPageToken *string              `json:"next_page_token,omitempty"`
	Result        *[]externalRef2.Call `json:"result,omitempty"`
}

func (response GetCalls200JSONResponse) VisitGetCallsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostCallsRequestObject struct {
	Body *PostCallsJSONRequestBody
}

type PostCallsResponseObject interface {
	VisitPostCallsResponse(w http.ResponseWriter) error
}

type PostCalls200JSONResponse struct {
	Calls      *[]externalRef2.Call      `json:"calls,omitempty"`
	Groupcalls *[]externalRef2.Groupcall `json:"groupcalls,omitempty"`
}

func (response PostCalls200JSONResponse) VisitPostCallsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteCallsIdRequestObject struct {
	Id string `json:"id"`
}

type DeleteCallsIdResponseObject interface {
	VisitDeleteCallsIdResponse(w http.ResponseWriter) error
}

type DeleteCallsId200JSONResponse externalRef2.Call

func (response DeleteCallsId200JSONResponse) VisitDeleteCallsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetCallsIdRequestObject struct {
	Id string `json:"id"`
}

type GetCallsIdResponseObject interface {
	VisitGetCallsIdResponse(w http.ResponseWriter) error
}

type GetCallsId200JSONResponse externalRef2.Call

func (response GetCallsId200JSONResponse) VisitGetCallsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostCallsIdHangupRequestObject struct {
	Id string `json:"id"`
}

type PostCallsIdHangupResponseObject interface {
	VisitPostCallsIdHangupResponse(w http.ResponseWriter) error
}

type PostCallsIdHangup200JSONResponse externalRef2.Call

func (response PostCallsIdHangup200JSONResponse) VisitPostCallsIdHangupResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteCallsIdHoldRequestObject struct {
	Id string `json:"id"`
}

type DeleteCallsIdHoldResponseObject interface {
	VisitDeleteCallsIdHoldResponse(w http.ResponseWriter) error
}

type DeleteCallsIdHold200Response struct {
}

func (response DeleteCallsIdHold200Response) VisitDeleteCallsIdHoldResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type PostCallsIdHoldRequestObject struct {
	Id string `json:"id"`
}

type PostCallsIdHoldResponseObject interface {
	VisitPostCallsIdHoldResponse(w http.ResponseWriter) error
}

type PostCallsIdHold200Response struct {
}

func (response PostCallsIdHold200Response) VisitPostCallsIdHoldResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type GetCallsIdMediaStreamRequestObject struct {
	Id string `json:"id"`
}

type GetCallsIdMediaStreamResponseObject interface {
	VisitGetCallsIdMediaStreamResponse(w http.ResponseWriter) error
}

type GetCallsIdMediaStream200Response struct {
}

func (response GetCallsIdMediaStream200Response) VisitGetCallsIdMediaStreamResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type DeleteCallsIdMohRequestObject struct {
	Id string `json:"id"`
}

type DeleteCallsIdMohResponseObject interface {
	VisitDeleteCallsIdMohResponse(w http.ResponseWriter) error
}

type DeleteCallsIdMoh200Response struct {
}

func (response DeleteCallsIdMoh200Response) VisitDeleteCallsIdMohResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type PostCallsIdMohRequestObject struct {
	Id string `json:"id"`
}

type PostCallsIdMohResponseObject interface {
	VisitPostCallsIdMohResponse(w http.ResponseWriter) error
}

type PostCallsIdMoh200Response struct {
}

func (response PostCallsIdMoh200Response) VisitPostCallsIdMohResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type DeleteCallsIdMuteRequestObject struct {
	Id string `json:"id"`
}

type DeleteCallsIdMuteResponseObject interface {
	VisitDeleteCallsIdMuteResponse(w http.ResponseWriter) error
}

type DeleteCallsIdMute200Response struct {
}

func (response DeleteCallsIdMute200Response) VisitDeleteCallsIdMuteResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type PostCallsIdMuteRequestObject struct {
	Id string `json:"id"`
}

type PostCallsIdMuteResponseObject interface {
	VisitPostCallsIdMuteResponse(w http.ResponseWriter) error
}

type PostCallsIdMute200Response struct {
}

func (response PostCallsIdMute200Response) VisitPostCallsIdMuteResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type DeleteCallsIdSilenceRequestObject struct {
	Id string `json:"id"`
}

type DeleteCallsIdSilenceResponseObject interface {
	VisitDeleteCallsIdSilenceResponse(w http.ResponseWriter) error
}

type DeleteCallsIdSilence200Response struct {
}

func (response DeleteCallsIdSilence200Response) VisitDeleteCallsIdSilenceResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type DeleteCallsIdSilence400Response struct {
}

func (response DeleteCallsIdSilence400Response) VisitDeleteCallsIdSilenceResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type PostCallsIdSilenceRequestObject struct {
	Id string `json:"id"`
}

type PostCallsIdSilenceResponseObject interface {
	VisitPostCallsIdSilenceResponse(w http.ResponseWriter) error
}

type PostCallsIdSilence200Response struct {
}

func (response PostCallsIdSilence200Response) VisitPostCallsIdSilenceResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type PostCallsIdSilence400Response struct {
}

func (response PostCallsIdSilence400Response) VisitPostCallsIdSilenceResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type PostCallsIdTalkRequestObject struct {
	Id string `json:"id"`
}

type PostCallsIdTalkResponseObject interface {
	VisitPostCallsIdTalkResponse(w http.ResponseWriter) error
}

type PostCallsIdTalk200Response struct {
}

func (response PostCallsIdTalk200Response) VisitPostCallsIdTalkResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type GetCampaigncallsRequestObject struct {
	Params GetCampaigncallsParams
}

type GetCampaigncallsResponseObject interface {
	VisitGetCampaigncallsResponse(w http.ResponseWriter) error
}

type GetCampaigncalls200JSONResponse struct {
	// NextPageToken The token for next pagination.
	NextPageToken *string                      `json:"next_page_token,omitempty"`
	Result        *[]externalRef3.Campaigncall `json:"result,omitempty"`
}

func (response GetCampaigncalls200JSONResponse) VisitGetCampaigncallsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteCampaigncallsIdRequestObject struct {
	Id string `json:"id"`
}

type DeleteCampaigncallsIdResponseObject interface {
	VisitDeleteCampaigncallsIdResponse(w http.ResponseWriter) error
}

type DeleteCampaigncallsId200JSONResponse externalRef3.Campaigncall

func (response DeleteCampaigncallsId200JSONResponse) VisitDeleteCampaigncallsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetCampaigncallsIdRequestObject struct {
	Id string `json:"id"`
}

type GetCampaigncallsIdResponseObject interface {
	VisitGetCampaigncallsIdResponse(w http.ResponseWriter) error
}

type GetCampaigncallsId200JSONResponse externalRef3.Campaigncall

func (response GetCampaigncallsId200JSONResponse) VisitGetCampaigncallsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetCampaignsRequestObject struct {
	Params GetCampaignsParams
}

type GetCampaignsResponseObject interface {
	VisitGetCampaignsResponse(w http.ResponseWriter) error
}

type GetCampaigns200JSONResponse struct {
	// NextPageToken The token for next pagination.
	NextPageToken *string                  `json:"next_page_token,omitempty"`
	Result        *[]externalRef3.Campaign `json:"result,omitempty"`
}

func (response GetCampaigns200JSONResponse) VisitGetCampaignsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostCampaignsRequestObject struct {
	Body *PostCampaignsJSONRequestBody
}

type PostCampaignsResponseObject interface {
	VisitPostCampaignsResponse(w http.ResponseWriter) error
}

type PostCampaigns200JSONResponse externalRef3.Campaign

func (response PostCampaigns200JSONResponse) VisitPostCampaignsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteCampaignsIdRequestObject struct {
	Id string `json:"id"`
}

type DeleteCampaignsIdResponseObject interface {
	VisitDeleteCampaignsIdResponse(w http.ResponseWriter) error
}

type DeleteCampaignsId200JSONResponse externalRef3.Campaign

func (response DeleteCampaignsId200JSONResponse) VisitDeleteCampaignsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetCampaignsIdRequestObject struct {
	Id string `json:"id"`
}

type GetCampaignsIdResponseObject interface {
	VisitGetCampaignsIdResponse(w http.ResponseWriter) error
}

type GetCampaignsId200JSONResponse externalRef3.Campaign

func (response GetCampaignsId200JSONResponse) VisitGetCampaignsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PutCampaignsIdRequestObject struct {
	Id   string `json:"id"`
	Body *PutCampaignsIdJSONRequestBody
}

type PutCampaignsIdResponseObject interface {
	VisitPutCampaignsIdResponse(w http.ResponseWriter) error
}

type PutCampaignsId200JSONResponse externalRef3.Campaign

func (response PutCampaignsId200JSONResponse) VisitPutCampaignsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PutCampaignsIdStatusRequestObject struct {
	Id   string `json:"id"`
	Body *PutCampaignsIdStatusJSONRequestBody
}

type PutCampaignsIdStatusResponseObject interface {
	VisitPutCampaignsIdStatusResponse(w http.ResponseWriter) error
}

type PutCampaignsIdStatus200JSONResponse externalRef3.Campaign

func (response PutCampaignsIdStatus200JSONResponse) VisitPutCampaignsIdStatusResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetChatbotcallsRequestObject struct {
	Params GetChatbotcallsParams
}

type GetChatbotcallsResponseObject interface {
	VisitGetChatbotcallsResponse(w http.ResponseWriter) error
}

type GetChatbotcalls200JSONResponse struct {
	// NextPageToken The token for next pagination.
	NextPageToken *string                     `json:"next_page_token,omitempty"`
	Result        *[]externalRef5.Chatbotcall `json:"result,omitempty"`
}

func (response GetChatbotcalls200JSONResponse) VisitGetChatbotcallsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteChatbotcallsIdRequestObject struct {
	Id string `json:"id"`
}

type DeleteChatbotcallsIdResponseObject interface {
	VisitDeleteChatbotcallsIdResponse(w http.ResponseWriter) error
}

type DeleteChatbotcallsId200JSONResponse externalRef5.Chatbotcall

func (response DeleteChatbotcallsId200JSONResponse) VisitDeleteChatbotcallsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetChatbotcallsIdRequestObject struct {
	Id string `json:"id"`
}

type GetChatbotcallsIdResponseObject interface {
	VisitGetChatbotcallsIdResponse(w http.ResponseWriter) error
}

type GetChatbotcallsId200JSONResponse externalRef5.Chatbotcall

func (response GetChatbotcallsId200JSONResponse) VisitGetChatbotcallsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetChatbotsRequestObject struct {
	Params GetChatbotsParams
}

type GetChatbotsResponseObject interface {
	VisitGetChatbotsResponse(w http.ResponseWriter) error
}

type GetChatbots200JSONResponse struct {
	// NextPageToken The token for next pagination.
	NextPageToken *string                 `json:"next_page_token,omitempty"`
	Result        *[]externalRef5.Chatbot `json:"result,omitempty"`
}

func (response GetChatbots200JSONResponse) VisitGetChatbotsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostChatbotsRequestObject struct {
	Body *PostChatbotsJSONRequestBody
}

type PostChatbotsResponseObject interface {
	VisitPostChatbotsResponse(w http.ResponseWriter) error
}

type PostChatbots200JSONResponse externalRef5.Chatbot

func (response PostChatbots200JSONResponse) VisitPostChatbotsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteChatbotsIdRequestObject struct {
	Id string `json:"id"`
}

type DeleteChatbotsIdResponseObject interface {
	VisitDeleteChatbotsIdResponse(w http.ResponseWriter) error
}

type DeleteChatbotsId200JSONResponse externalRef5.Chatbot

func (response DeleteChatbotsId200JSONResponse) VisitDeleteChatbotsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetChatbotsIdRequestObject struct {
	Id string `json:"id"`
}

type GetChatbotsIdResponseObject interface {
	VisitGetChatbotsIdResponse(w http.ResponseWriter) error
}

type GetChatbotsId200JSONResponse externalRef5.Chatbot

func (response GetChatbotsId200JSONResponse) VisitGetChatbotsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PutChatbotsIdRequestObject struct {
	Id   string `json:"id"`
	Body *PutChatbotsIdJSONRequestBody
}

type PutChatbotsIdResponseObject interface {
	VisitPutChatbotsIdResponse(w http.ResponseWriter) error
}

type PutChatbotsId200JSONResponse externalRef5.Chatbot

func (response PutChatbotsId200JSONResponse) VisitPutChatbotsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetChatmessagesRequestObject struct {
	Params GetChatmessagesParams
}

type GetChatmessagesResponseObject interface {
	VisitGetChatmessagesResponse(w http.ResponseWriter) error
}

type GetChatmessages200JSONResponse struct {
	// NextPageToken The token for next pagination.
	NextPageToken *string                     `json:"next_page_token,omitempty"`
	Result        *[]externalRef4.Messagechat `json:"result,omitempty"`
}

func (response GetChatmessages200JSONResponse) VisitGetChatmessagesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostChatmessagesRequestObject struct {
	Body *PostChatmessagesJSONRequestBody
}

type PostChatmessagesResponseObject interface {
	VisitPostChatmessagesResponse(w http.ResponseWriter) error
}

type PostChatmessages200JSONResponse externalRef4.Messagechat

func (response PostChatmessages200JSONResponse) VisitPostChatmessagesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteChatmessagesIdRequestObject struct {
	Id string `json:"id"`
}

type DeleteChatmessagesIdResponseObject interface {
	VisitDeleteChatmessagesIdResponse(w http.ResponseWriter) error
}

type DeleteChatmessagesId200JSONResponse externalRef4.Messagechat

func (response DeleteChatmessagesId200JSONResponse) VisitDeleteChatmessagesIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetChatmessagesIdRequestObject struct {
	Id string `json:"id"`
}

type GetChatmessagesIdResponseObject interface {
	VisitGetChatmessagesIdResponse(w http.ResponseWriter) error
}

type GetChatmessagesId200JSONResponse externalRef4.Messagechat

func (response GetChatmessagesId200JSONResponse) VisitGetChatmessagesIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetChatroommessagesRequestObject struct {
	Params GetChatroommessagesParams
}

type GetChatroommessagesResponseObject interface {
	VisitGetChatroommessagesResponse(w http.ResponseWriter) error
}

type GetChatroommessages200JSONResponse struct {
	// NextPageToken The token for next pagination.
	NextPageToken *string                         `json:"next_page_token,omitempty"`
	Result        *[]externalRef4.Messagechatroom `json:"result,omitempty"`
}

func (response GetChatroommessages200JSONResponse) VisitGetChatroommessagesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostChatroommessagesRequestObject struct {
	Body *PostChatroommessagesJSONRequestBody
}

type PostChatroommessagesResponseObject interface {
	VisitPostChatroommessagesResponse(w http.ResponseWriter) error
}

type PostChatroommessages200JSONResponse externalRef4.Messagechatroom

func (response PostChatroommessages200JSONResponse) VisitPostChatroommessagesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteChatroommessagesIdRequestObject struct {
	Id string `json:"id"`
}

type DeleteChatroommessagesIdResponseObject interface {
	VisitDeleteChatroommessagesIdResponse(w http.ResponseWriter) error
}

type DeleteChatroommessagesId200JSONResponse externalRef4.Messagechatroom

func (response DeleteChatroommessagesId200JSONResponse) VisitDeleteChatroommessagesIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetChatroommessagesIdRequestObject struct {
	Id string `json:"id"`
}

type GetChatroommessagesIdResponseObject interface {
	VisitGetChatroommessagesIdResponse(w http.ResponseWriter) error
}

type GetChatroommessagesId200JSONResponse externalRef4.Messagechatroom

func (response GetChatroommessagesId200JSONResponse) VisitGetChatroommessagesIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetChatroomsRequestObject struct {
	Params GetChatroomsParams
}

type GetChatroomsResponseObject interface {
	VisitGetChatroomsResponse(w http.ResponseWriter) error
}

type GetChatrooms200JSONResponse struct {
	// NextPageToken The token for next pagination.
	NextPageToken *string                  `json:"next_page_token,omitempty"`
	Result        *[]externalRef4.Chatroom `json:"result,omitempty"`
}

func (response GetChatrooms200JSONResponse) VisitGetChatroomsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostChatroomsRequestObject struct {
	Body *PostChatroomsJSONRequestBody
}

type PostChatroomsResponseObject interface {
	VisitPostChatroomsResponse(w http.ResponseWriter) error
}

type PostChatrooms200JSONResponse externalRef4.Chatroom

func (response PostChatrooms200JSONResponse) VisitPostChatroomsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteChatroomsIdRequestObject struct {
	Id string `json:"id"`
}

type DeleteChatroomsIdResponseObject interface {
	VisitDeleteChatroomsIdResponse(w http.ResponseWriter) error
}

type DeleteChatroomsId200JSONResponse externalRef4.Chatroom

func (response DeleteChatroomsId200JSONResponse) VisitDeleteChatroomsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetChatroomsIdRequestObject struct {
	Id string `json:"id"`
}

type GetChatroomsIdResponseObject interface {
	VisitGetChatroomsIdResponse(w http.ResponseWriter) error
}

type GetChatroomsId200JSONResponse externalRef4.Chatroom

func (response GetChatroomsId200JSONResponse) VisitGetChatroomsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PutChatroomsIdRequestObject struct {
	Id   string `json:"id"`
	Body *PutChatroomsIdJSONRequestBody
}

type PutChatroomsIdResponseObject interface {
	VisitPutChatroomsIdResponse(w http.ResponseWriter) error
}

type PutChatroomsId200JSONResponse externalRef4.Chatroom

func (response PutChatroomsId200JSONResponse) VisitPutChatroomsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetChatsRequestObject struct {
	Params GetChatsParams
}

type GetChatsResponseObject interface {
	VisitGetChatsResponse(w http.ResponseWriter) error
}

type GetChats200JSONResponse struct {
	// NextPageToken The token for next pagination.
	NextPageToken *string              `json:"next_page_token,omitempty"`
	Result        *[]externalRef4.Chat `json:"result,omitempty"`
}

func (response GetChats200JSONResponse) VisitGetChatsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostChatsRequestObject struct {
	Body *PostChatsJSONRequestBody
}

type PostChatsResponseObject interface {
	VisitPostChatsResponse(w http.ResponseWriter) error
}

type PostChats200JSONResponse externalRef4.Chat

func (response PostChats200JSONResponse) VisitPostChatsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteChatsIdRequestObject struct {
	Id string `json:"id"`
}

type DeleteChatsIdResponseObject interface {
	VisitDeleteChatsIdResponse(w http.ResponseWriter) error
}

type DeleteChatsId200JSONResponse externalRef4.Chat

func (response DeleteChatsId200JSONResponse) VisitDeleteChatsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetChatsIdRequestObject struct {
	Id string `json:"id"`
}

type GetChatsIdResponseObject interface {
	VisitGetChatsIdResponse(w http.ResponseWriter) error
}

type GetChatsId200JSONResponse externalRef4.Chat

func (response GetChatsId200JSONResponse) VisitGetChatsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PutChatsIdRequestObject struct {
	Id   string `json:"id"`
	Body *PutChatsIdJSONRequestBody
}

type PutChatsIdResponseObject interface {
	VisitPutChatsIdResponse(w http.ResponseWriter) error
}

type PutChatsId200JSONResponse externalRef4.Chat

func (response PutChatsId200JSONResponse) VisitPutChatsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostChatsIdParticipantIdsRequestObject struct {
	Id   string `json:"id"`
	Body *PostChatsIdParticipantIdsJSONRequestBody
}

type PostChatsIdParticipantIdsResponseObject interface {
	VisitPostChatsIdParticipantIdsResponse(w http.ResponseWriter) error
}

type PostChatsIdParticipantIds200JSONResponse externalRef4.Chat

func (response PostChatsIdParticipantIds200JSONResponse) VisitPostChatsIdParticipantIdsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Get list of accesskeys
	// (GET /accesskeys)
	GetAccesskeys(ctx context.Context, request GetAccesskeysRequestObject) (GetAccesskeysResponseObject, error)
	// Create a new accesskey.
	// (POST /accesskeys)
	PostAccesskeys(ctx context.Context, request PostAccesskeysRequestObject) (PostAccesskeysResponseObject, error)
	// Delete an accesskey
	// (DELETE /accesskeys/{id})
	DeleteAccesskeysId(ctx context.Context, request DeleteAccesskeysIdRequestObject) (DeleteAccesskeysIdResponseObject, error)
	// Get details of an accesskey
	// (GET /accesskeys/{id})
	GetAccesskeysId(ctx context.Context, request GetAccesskeysIdRequestObject) (GetAccesskeysIdResponseObject, error)
	// Update an accesskey
	// (PUT /accesskeys/{id})
	PutAccesskeysId(ctx context.Context, request PutAccesskeysIdRequestObject) (PutAccesskeysIdResponseObject, error)
	// List all activeflows
	// (GET /activeflows)
	GetActiveflows(ctx context.Context, request GetActiveflowsRequestObject) (GetActiveflowsResponseObject, error)
	// Create a new activeflow
	// (POST /activeflows)
	PostActiveflows(ctx context.Context, request PostActiveflowsRequestObject) (PostActiveflowsResponseObject, error)
	// Delete an active flow
	// (DELETE /activeflows/{id})
	DeleteActiveflowsId(ctx context.Context, request DeleteActiveflowsIdRequestObject) (DeleteActiveflowsIdResponseObject, error)
	// Get an active flow by ID
	// (GET /activeflows/{id})
	GetActiveflowsId(ctx context.Context, request GetActiveflowsIdRequestObject) (GetActiveflowsIdResponseObject, error)
	// Stop an active flow
	// (POST /activeflows/{id}/stop)
	PostActiveflowsIdStop(ctx context.Context, request PostActiveflowsIdStopRequestObject) (PostActiveflowsIdStopResponseObject, error)
	// List agents
	// (GET /agents)
	GetAgents(ctx context.Context, request GetAgentsRequestObject) (GetAgentsResponseObject, error)
	// Create a new agent
	// (POST /agents)
	PostAgents(ctx context.Context, request PostAgentsRequestObject) (PostAgentsResponseObject, error)
	// Delete the agent
	// (DELETE /agents/{id})
	DeleteAgentsId(ctx context.Context, request DeleteAgentsIdRequestObject) (DeleteAgentsIdResponseObject, error)
	// Get the agent
	// (GET /agents/{id})
	GetAgentsId(ctx context.Context, request GetAgentsIdRequestObject) (GetAgentsIdResponseObject, error)
	// Update an agent
	// (PUT /agents/{id})
	PutAgentsId(ctx context.Context, request PutAgentsIdRequestObject) (PutAgentsIdResponseObject, error)
	// Update an agent's addresses
	// (PUT /agents/{id}/addresses)
	PutAgentsIdAddresses(ctx context.Context, request PutAgentsIdAddressesRequestObject) (PutAgentsIdAddressesResponseObject, error)
	// Update an agent's password
	// (PUT /agents/{id}/password)
	PutAgentsIdPassword(ctx context.Context, request PutAgentsIdPasswordRequestObject) (PutAgentsIdPasswordResponseObject, error)
	// Update an agent's permission
	// (PUT /agents/{id}/permission)
	PutAgentsIdPermission(ctx context.Context, request PutAgentsIdPermissionRequestObject) (PutAgentsIdPermissionResponseObject, error)
	// Update an agent's tag IDs
	// (PUT /agents/{id}/tag_ids)
	PutAgentsIdTagIds(ctx context.Context, request PutAgentsIdTagIdsRequestObject) (PutAgentsIdTagIdsResponseObject, error)
	// List available numbers
	// (GET /available_numbers)
	GetAvailableNumbers(ctx context.Context, request GetAvailableNumbersRequestObject) (GetAvailableNumbersResponseObject, error)
	// Get list of billing accounts
	// (GET /billing_accounts)
	GetBillingAccounts(ctx context.Context, request GetBillingAccountsRequestObject) (GetBillingAccountsResponseObject, error)
	// Create a new billing account
	// (POST /billing_accounts)
	PostBillingAccounts(ctx context.Context, request PostBillingAccountsRequestObject) (PostBillingAccountsResponseObject, error)
	// Delete billing account
	// (DELETE /billing_accounts/{id})
	DeleteBillingAccountsId(ctx context.Context, request DeleteBillingAccountsIdRequestObject) (DeleteBillingAccountsIdResponseObject, error)
	// Get detailed billing account info
	// (GET /billing_accounts/{id})
	GetBillingAccountsId(ctx context.Context, request GetBillingAccountsIdRequestObject) (GetBillingAccountsIdResponseObject, error)
	// Update billing account
	// (PUT /billing_accounts/{id})
	PutBillingAccountsId(ctx context.Context, request PutBillingAccountsIdRequestObject) (PutBillingAccountsIdResponseObject, error)
	// Add balance to billing account
	// (POST /billing_accounts/{id}/balance_add_force)
	PostBillingAccountsIdBalanceAddForce(ctx context.Context, request PostBillingAccountsIdBalanceAddForceRequestObject) (PostBillingAccountsIdBalanceAddForceResponseObject, error)
	// Subtract balance from billing account
	// (POST /billing_accounts/{id}/balance_subtract_force)
	PostBillingAccountsIdBalanceSubtractForce(ctx context.Context, request PostBillingAccountsIdBalanceSubtractForceRequestObject) (PostBillingAccountsIdBalanceSubtractForceResponseObject, error)
	// Update billing account's payment info
	// (PUT /billing_accounts/{id}/payment_info)
	PutBillingAccountsIdPaymentInfo(ctx context.Context, request PutBillingAccountsIdPaymentInfoRequestObject) (PutBillingAccountsIdPaymentInfoResponseObject, error)
	// Get list of calls
	// (GET /calls)
	GetCalls(ctx context.Context, request GetCallsRequestObject) (GetCallsResponseObject, error)
	// Make an outbound call
	// (POST /calls)
	PostCalls(ctx context.Context, request PostCallsRequestObject) (PostCallsResponseObject, error)
	// Delete up the call
	// (DELETE /calls/{id})
	DeleteCallsId(ctx context.Context, request DeleteCallsIdRequestObject) (DeleteCallsIdResponseObject, error)
	// Get detail call info
	// (GET /calls/{id})
	GetCallsId(ctx context.Context, request GetCallsIdRequestObject) (GetCallsIdResponseObject, error)
	// Hang up the call
	// (POST /calls/{id}/hangup)
	PostCallsIdHangup(ctx context.Context, request PostCallsIdHangupRequestObject) (PostCallsIdHangupResponseObject, error)
	// Unhold the call
	// (DELETE /calls/{id}/hold)
	DeleteCallsIdHold(ctx context.Context, request DeleteCallsIdHoldRequestObject) (DeleteCallsIdHoldResponseObject, error)
	// Hold the call
	// (POST /calls/{id}/hold)
	PostCallsIdHold(ctx context.Context, request PostCallsIdHoldRequestObject) (PostCallsIdHoldResponseObject, error)
	// Get media stream for the call
	// (GET /calls/{id}/media_stream)
	GetCallsIdMediaStream(ctx context.Context, request GetCallsIdMediaStreamRequestObject) (GetCallsIdMediaStreamResponseObject, error)
	// Disable Music on Hold (MOH)
	// (DELETE /calls/{id}/moh)
	DeleteCallsIdMoh(ctx context.Context, request DeleteCallsIdMohRequestObject) (DeleteCallsIdMohResponseObject, error)
	// Enable Music on Hold (MOH)
	// (POST /calls/{id}/moh)
	PostCallsIdMoh(ctx context.Context, request PostCallsIdMohRequestObject) (PostCallsIdMohResponseObject, error)
	// Unmute the call
	// (DELETE /calls/{id}/mute)
	DeleteCallsIdMute(ctx context.Context, request DeleteCallsIdMuteRequestObject) (DeleteCallsIdMuteResponseObject, error)
	// Mute the call
	// (POST /calls/{id}/mute)
	PostCallsIdMute(ctx context.Context, request PostCallsIdMuteRequestObject) (PostCallsIdMuteResponseObject, error)
	// Un-silence a call
	// (DELETE /calls/{id}/silence)
	DeleteCallsIdSilence(ctx context.Context, request DeleteCallsIdSilenceRequestObject) (DeleteCallsIdSilenceResponseObject, error)
	// Silence a call
	// (POST /calls/{id}/silence)
	PostCallsIdSilence(ctx context.Context, request PostCallsIdSilenceRequestObject) (PostCallsIdSilenceResponseObject, error)
	// Talk to the call
	// (POST /calls/{id}/talk)
	PostCallsIdTalk(ctx context.Context, request PostCallsIdTalkRequestObject) (PostCallsIdTalkResponseObject, error)
	// Get list of campaign calls
	// (GET /campaigncalls)
	GetCampaigncalls(ctx context.Context, request GetCampaigncallsRequestObject) (GetCampaigncallsResponseObject, error)
	// Delete a campaign call
	// (DELETE /campaigncalls/{id})
	DeleteCampaigncallsId(ctx context.Context, request DeleteCampaigncallsIdRequestObject) (DeleteCampaigncallsIdResponseObject, error)
	// Get campaign call details
	// (GET /campaigncalls/{id})
	GetCampaigncallsId(ctx context.Context, request GetCampaigncallsIdRequestObject) (GetCampaigncallsIdResponseObject, error)
	// Get a list of campaigns
	// (GET /campaigns)
	GetCampaigns(ctx context.Context, request GetCampaignsRequestObject) (GetCampaignsResponseObject, error)
	// Create a new campaign
	// (POST /campaigns)
	PostCampaigns(ctx context.Context, request PostCampaignsRequestObject) (PostCampaignsResponseObject, error)
	// Delete a campaign
	// (DELETE /campaigns/{id})
	DeleteCampaignsId(ctx context.Context, request DeleteCampaignsIdRequestObject) (DeleteCampaignsIdResponseObject, error)
	// Get campaign details
	// (GET /campaigns/{id})
	GetCampaignsId(ctx context.Context, request GetCampaignsIdRequestObject) (GetCampaignsIdResponseObject, error)
	// Update a campaign
	// (PUT /campaigns/{id})
	PutCampaignsId(ctx context.Context, request PutCampaignsIdRequestObject) (PutCampaignsIdResponseObject, error)
	// Update campaign status
	// (PUT /campaigns/{id}/status)
	PutCampaignsIdStatus(ctx context.Context, request PutCampaignsIdStatusRequestObject) (PutCampaignsIdStatusResponseObject, error)
	// Gets a list of chatbot calls
	// (GET /chatbotcalls)
	GetChatbotcalls(ctx context.Context, request GetChatbotcallsRequestObject) (GetChatbotcallsResponseObject, error)
	// Delete a specific chatbot call
	// (DELETE /chatbotcalls/{id})
	DeleteChatbotcallsId(ctx context.Context, request DeleteChatbotcallsIdRequestObject) (DeleteChatbotcallsIdResponseObject, error)
	// Get details of a specific chatbot call
	// (GET /chatbotcalls/{id})
	GetChatbotcallsId(ctx context.Context, request GetChatbotcallsIdRequestObject) (GetChatbotcallsIdResponseObject, error)
	// Gets a list of chatbots.
	// (GET /chatbots)
	GetChatbots(ctx context.Context, request GetChatbotsRequestObject) (GetChatbotsResponseObject, error)
	// Create a new chatbot.
	// (POST /chatbots)
	PostChatbots(ctx context.Context, request PostChatbotsRequestObject) (PostChatbotsResponseObject, error)
	// Delete a chatbot.
	// (DELETE /chatbots/{id})
	DeleteChatbotsId(ctx context.Context, request DeleteChatbotsIdRequestObject) (DeleteChatbotsIdResponseObject, error)
	// Get chatbot details.
	// (GET /chatbots/{id})
	GetChatbotsId(ctx context.Context, request GetChatbotsIdRequestObject) (GetChatbotsIdResponseObject, error)
	// Update a chatbot.
	// (PUT /chatbots/{id})
	PutChatbotsId(ctx context.Context, request PutChatbotsIdRequestObject) (PutChatbotsIdResponseObject, error)
	// Retrieve a list of chat messages
	// (GET /chatmessages)
	GetChatmessages(ctx context.Context, request GetChatmessagesRequestObject) (GetChatmessagesResponseObject, error)
	// Create a new chat message
	// (POST /chatmessages)
	PostChatmessages(ctx context.Context, request PostChatmessagesRequestObject) (PostChatmessagesResponseObject, error)
	// Delete a chat message
	// (DELETE /chatmessages/{id})
	DeleteChatmessagesId(ctx context.Context, request DeleteChatmessagesIdRequestObject) (DeleteChatmessagesIdResponseObject, error)
	// Retrieve details of a chat message
	// (GET /chatmessages/{id})
	GetChatmessagesId(ctx context.Context, request GetChatmessagesIdRequestObject) (GetChatmessagesIdResponseObject, error)
	// Retrieve a list of chatroom messages
	// (GET /chatroommessages)
	GetChatroommessages(ctx context.Context, request GetChatroommessagesRequestObject) (GetChatroommessagesResponseObject, error)
	// Create a new chatroom message
	// (POST /chatroommessages)
	PostChatroommessages(ctx context.Context, request PostChatroommessagesRequestObject) (PostChatroommessagesResponseObject, error)
	// Delete a chatroom message
	// (DELETE /chatroommessages/{id})
	DeleteChatroommessagesId(ctx context.Context, request DeleteChatroommessagesIdRequestObject) (DeleteChatroommessagesIdResponseObject, error)
	// Get details of a specific chatroom message
	// (GET /chatroommessages/{id})
	GetChatroommessagesId(ctx context.Context, request GetChatroommessagesIdRequestObject) (GetChatroommessagesIdResponseObject, error)
	// Gets a list of chatrooms.
	// (GET /chatrooms)
	GetChatrooms(ctx context.Context, request GetChatroomsRequestObject) (GetChatroomsResponseObject, error)
	// Create a new chatroom.
	// (POST /chatrooms)
	PostChatrooms(ctx context.Context, request PostChatroomsRequestObject) (PostChatroomsResponseObject, error)
	// Delete a chatroom.
	// (DELETE /chatrooms/{id})
	DeleteChatroomsId(ctx context.Context, request DeleteChatroomsIdRequestObject) (DeleteChatroomsIdResponseObject, error)
	// Get chatroom details.
	// (GET /chatrooms/{id})
	GetChatroomsId(ctx context.Context, request GetChatroomsIdRequestObject) (GetChatroomsIdResponseObject, error)
	// Update a chatroom.
	// (PUT /chatrooms/{id})
	PutChatroomsId(ctx context.Context, request PutChatroomsIdRequestObject) (PutChatroomsIdResponseObject, error)
	// Gets a list of chats.
	// (GET /chats)
	GetChats(ctx context.Context, request GetChatsRequestObject) (GetChatsResponseObject, error)
	// Create a new chat.
	// (POST /chats)
	PostChats(ctx context.Context, request PostChatsRequestObject) (PostChatsResponseObject, error)
	// Delete a chat.
	// (DELETE /chats/{id})
	DeleteChatsId(ctx context.Context, request DeleteChatsIdRequestObject) (DeleteChatsIdResponseObject, error)
	// Get details of a specific chat.
	// (GET /chats/{id})
	GetChatsId(ctx context.Context, request GetChatsIdRequestObject) (GetChatsIdResponseObject, error)
	// Update a chat.
	// (PUT /chats/{id})
	PutChatsId(ctx context.Context, request PutChatsIdRequestObject) (PutChatsIdResponseObject, error)
	// Add a participant to a chat.
	// (POST /chats/{id}/participant_ids)
	PostChatsIdParticipantIds(ctx context.Context, request PostChatsIdParticipantIdsRequestObject) (PostChatsIdParticipantIdsResponseObject, error)
}

type StrictHandlerFunc = strictgin.StrictGinHandlerFunc
type StrictMiddlewareFunc = strictgin.StrictGinMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// GetAccesskeys operation middleware
func (sh *strictHandler) GetAccesskeys(ctx *gin.Context, params GetAccesskeysParams) {
	var request GetAccesskeysRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetAccesskeys(ctx, request.(GetAccesskeysRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAccesskeys")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetAccesskeysResponseObject); ok {
		if err := validResponse.VisitGetAccesskeysResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostAccesskeys operation middleware
func (sh *strictHandler) PostAccesskeys(ctx *gin.Context) {
	var request PostAccesskeysRequestObject

	var body PostAccesskeysJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostAccesskeys(ctx, request.(PostAccesskeysRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostAccesskeys")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostAccesskeysResponseObject); ok {
		if err := validResponse.VisitPostAccesskeysResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteAccesskeysId operation middleware
func (sh *strictHandler) DeleteAccesskeysId(ctx *gin.Context, id string) {
	var request DeleteAccesskeysIdRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteAccesskeysId(ctx, request.(DeleteAccesskeysIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteAccesskeysId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteAccesskeysIdResponseObject); ok {
		if err := validResponse.VisitDeleteAccesskeysIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetAccesskeysId operation middleware
func (sh *strictHandler) GetAccesskeysId(ctx *gin.Context, id string) {
	var request GetAccesskeysIdRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetAccesskeysId(ctx, request.(GetAccesskeysIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAccesskeysId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetAccesskeysIdResponseObject); ok {
		if err := validResponse.VisitGetAccesskeysIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PutAccesskeysId operation middleware
func (sh *strictHandler) PutAccesskeysId(ctx *gin.Context, id string) {
	var request PutAccesskeysIdRequestObject

	request.Id = id

	var body PutAccesskeysIdJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PutAccesskeysId(ctx, request.(PutAccesskeysIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutAccesskeysId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PutAccesskeysIdResponseObject); ok {
		if err := validResponse.VisitPutAccesskeysIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetActiveflows operation middleware
func (sh *strictHandler) GetActiveflows(ctx *gin.Context, params GetActiveflowsParams) {
	var request GetActiveflowsRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetActiveflows(ctx, request.(GetActiveflowsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetActiveflows")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetActiveflowsResponseObject); ok {
		if err := validResponse.VisitGetActiveflowsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostActiveflows operation middleware
func (sh *strictHandler) PostActiveflows(ctx *gin.Context) {
	var request PostActiveflowsRequestObject

	var body PostActiveflowsJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostActiveflows(ctx, request.(PostActiveflowsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostActiveflows")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostActiveflowsResponseObject); ok {
		if err := validResponse.VisitPostActiveflowsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteActiveflowsId operation middleware
func (sh *strictHandler) DeleteActiveflowsId(ctx *gin.Context, id string) {
	var request DeleteActiveflowsIdRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteActiveflowsId(ctx, request.(DeleteActiveflowsIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteActiveflowsId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteActiveflowsIdResponseObject); ok {
		if err := validResponse.VisitDeleteActiveflowsIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetActiveflowsId operation middleware
func (sh *strictHandler) GetActiveflowsId(ctx *gin.Context, id string) {
	var request GetActiveflowsIdRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetActiveflowsId(ctx, request.(GetActiveflowsIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetActiveflowsId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetActiveflowsIdResponseObject); ok {
		if err := validResponse.VisitGetActiveflowsIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostActiveflowsIdStop operation middleware
func (sh *strictHandler) PostActiveflowsIdStop(ctx *gin.Context, id string) {
	var request PostActiveflowsIdStopRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostActiveflowsIdStop(ctx, request.(PostActiveflowsIdStopRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostActiveflowsIdStop")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostActiveflowsIdStopResponseObject); ok {
		if err := validResponse.VisitPostActiveflowsIdStopResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetAgents operation middleware
func (sh *strictHandler) GetAgents(ctx *gin.Context, params GetAgentsParams) {
	var request GetAgentsRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetAgents(ctx, request.(GetAgentsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAgents")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetAgentsResponseObject); ok {
		if err := validResponse.VisitGetAgentsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostAgents operation middleware
func (sh *strictHandler) PostAgents(ctx *gin.Context) {
	var request PostAgentsRequestObject

	var body PostAgentsJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostAgents(ctx, request.(PostAgentsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostAgents")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostAgentsResponseObject); ok {
		if err := validResponse.VisitPostAgentsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteAgentsId operation middleware
func (sh *strictHandler) DeleteAgentsId(ctx *gin.Context, id string) {
	var request DeleteAgentsIdRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteAgentsId(ctx, request.(DeleteAgentsIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteAgentsId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteAgentsIdResponseObject); ok {
		if err := validResponse.VisitDeleteAgentsIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetAgentsId operation middleware
func (sh *strictHandler) GetAgentsId(ctx *gin.Context, id string) {
	var request GetAgentsIdRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetAgentsId(ctx, request.(GetAgentsIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAgentsId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetAgentsIdResponseObject); ok {
		if err := validResponse.VisitGetAgentsIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PutAgentsId operation middleware
func (sh *strictHandler) PutAgentsId(ctx *gin.Context, id string) {
	var request PutAgentsIdRequestObject

	request.Id = id

	var body PutAgentsIdJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PutAgentsId(ctx, request.(PutAgentsIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutAgentsId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PutAgentsIdResponseObject); ok {
		if err := validResponse.VisitPutAgentsIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PutAgentsIdAddresses operation middleware
func (sh *strictHandler) PutAgentsIdAddresses(ctx *gin.Context, id string) {
	var request PutAgentsIdAddressesRequestObject

	request.Id = id

	var body PutAgentsIdAddressesJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PutAgentsIdAddresses(ctx, request.(PutAgentsIdAddressesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutAgentsIdAddresses")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PutAgentsIdAddressesResponseObject); ok {
		if err := validResponse.VisitPutAgentsIdAddressesResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PutAgentsIdPassword operation middleware
func (sh *strictHandler) PutAgentsIdPassword(ctx *gin.Context, id string) {
	var request PutAgentsIdPasswordRequestObject

	request.Id = id

	var body PutAgentsIdPasswordJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PutAgentsIdPassword(ctx, request.(PutAgentsIdPasswordRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutAgentsIdPassword")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PutAgentsIdPasswordResponseObject); ok {
		if err := validResponse.VisitPutAgentsIdPasswordResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PutAgentsIdPermission operation middleware
func (sh *strictHandler) PutAgentsIdPermission(ctx *gin.Context, id string) {
	var request PutAgentsIdPermissionRequestObject

	request.Id = id

	var body PutAgentsIdPermissionJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PutAgentsIdPermission(ctx, request.(PutAgentsIdPermissionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutAgentsIdPermission")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PutAgentsIdPermissionResponseObject); ok {
		if err := validResponse.VisitPutAgentsIdPermissionResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PutAgentsIdTagIds operation middleware
func (sh *strictHandler) PutAgentsIdTagIds(ctx *gin.Context, id string) {
	var request PutAgentsIdTagIdsRequestObject

	request.Id = id

	var body PutAgentsIdTagIdsJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PutAgentsIdTagIds(ctx, request.(PutAgentsIdTagIdsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutAgentsIdTagIds")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PutAgentsIdTagIdsResponseObject); ok {
		if err := validResponse.VisitPutAgentsIdTagIdsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetAvailableNumbers operation middleware
func (sh *strictHandler) GetAvailableNumbers(ctx *gin.Context, params GetAvailableNumbersParams) {
	var request GetAvailableNumbersRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetAvailableNumbers(ctx, request.(GetAvailableNumbersRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAvailableNumbers")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetAvailableNumbersResponseObject); ok {
		if err := validResponse.VisitGetAvailableNumbersResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetBillingAccounts operation middleware
func (sh *strictHandler) GetBillingAccounts(ctx *gin.Context, params GetBillingAccountsParams) {
	var request GetBillingAccountsRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetBillingAccounts(ctx, request.(GetBillingAccountsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetBillingAccounts")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetBillingAccountsResponseObject); ok {
		if err := validResponse.VisitGetBillingAccountsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostBillingAccounts operation middleware
func (sh *strictHandler) PostBillingAccounts(ctx *gin.Context) {
	var request PostBillingAccountsRequestObject

	var body PostBillingAccountsJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostBillingAccounts(ctx, request.(PostBillingAccountsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostBillingAccounts")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostBillingAccountsResponseObject); ok {
		if err := validResponse.VisitPostBillingAccountsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteBillingAccountsId operation middleware
func (sh *strictHandler) DeleteBillingAccountsId(ctx *gin.Context, id openapi_types.UUID) {
	var request DeleteBillingAccountsIdRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteBillingAccountsId(ctx, request.(DeleteBillingAccountsIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteBillingAccountsId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteBillingAccountsIdResponseObject); ok {
		if err := validResponse.VisitDeleteBillingAccountsIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetBillingAccountsId operation middleware
func (sh *strictHandler) GetBillingAccountsId(ctx *gin.Context, id openapi_types.UUID) {
	var request GetBillingAccountsIdRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetBillingAccountsId(ctx, request.(GetBillingAccountsIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetBillingAccountsId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetBillingAccountsIdResponseObject); ok {
		if err := validResponse.VisitGetBillingAccountsIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PutBillingAccountsId operation middleware
func (sh *strictHandler) PutBillingAccountsId(ctx *gin.Context, id openapi_types.UUID) {
	var request PutBillingAccountsIdRequestObject

	request.Id = id

	var body PutBillingAccountsIdJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PutBillingAccountsId(ctx, request.(PutBillingAccountsIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutBillingAccountsId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PutBillingAccountsIdResponseObject); ok {
		if err := validResponse.VisitPutBillingAccountsIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostBillingAccountsIdBalanceAddForce operation middleware
func (sh *strictHandler) PostBillingAccountsIdBalanceAddForce(ctx *gin.Context, id openapi_types.UUID) {
	var request PostBillingAccountsIdBalanceAddForceRequestObject

	request.Id = id

	var body PostBillingAccountsIdBalanceAddForceJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostBillingAccountsIdBalanceAddForce(ctx, request.(PostBillingAccountsIdBalanceAddForceRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostBillingAccountsIdBalanceAddForce")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostBillingAccountsIdBalanceAddForceResponseObject); ok {
		if err := validResponse.VisitPostBillingAccountsIdBalanceAddForceResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostBillingAccountsIdBalanceSubtractForce operation middleware
func (sh *strictHandler) PostBillingAccountsIdBalanceSubtractForce(ctx *gin.Context, id openapi_types.UUID) {
	var request PostBillingAccountsIdBalanceSubtractForceRequestObject

	request.Id = id

	var body PostBillingAccountsIdBalanceSubtractForceJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostBillingAccountsIdBalanceSubtractForce(ctx, request.(PostBillingAccountsIdBalanceSubtractForceRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostBillingAccountsIdBalanceSubtractForce")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostBillingAccountsIdBalanceSubtractForceResponseObject); ok {
		if err := validResponse.VisitPostBillingAccountsIdBalanceSubtractForceResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PutBillingAccountsIdPaymentInfo operation middleware
func (sh *strictHandler) PutBillingAccountsIdPaymentInfo(ctx *gin.Context, id openapi_types.UUID) {
	var request PutBillingAccountsIdPaymentInfoRequestObject

	request.Id = id

	var body PutBillingAccountsIdPaymentInfoJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PutBillingAccountsIdPaymentInfo(ctx, request.(PutBillingAccountsIdPaymentInfoRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutBillingAccountsIdPaymentInfo")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PutBillingAccountsIdPaymentInfoResponseObject); ok {
		if err := validResponse.VisitPutBillingAccountsIdPaymentInfoResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetCalls operation middleware
func (sh *strictHandler) GetCalls(ctx *gin.Context, params GetCallsParams) {
	var request GetCallsRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetCalls(ctx, request.(GetCallsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetCalls")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetCallsResponseObject); ok {
		if err := validResponse.VisitGetCallsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostCalls operation middleware
func (sh *strictHandler) PostCalls(ctx *gin.Context) {
	var request PostCallsRequestObject

	var body PostCallsJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostCalls(ctx, request.(PostCallsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostCalls")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostCallsResponseObject); ok {
		if err := validResponse.VisitPostCallsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteCallsId operation middleware
func (sh *strictHandler) DeleteCallsId(ctx *gin.Context, id string) {
	var request DeleteCallsIdRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteCallsId(ctx, request.(DeleteCallsIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteCallsId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteCallsIdResponseObject); ok {
		if err := validResponse.VisitDeleteCallsIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetCallsId operation middleware
func (sh *strictHandler) GetCallsId(ctx *gin.Context, id string) {
	var request GetCallsIdRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetCallsId(ctx, request.(GetCallsIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetCallsId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetCallsIdResponseObject); ok {
		if err := validResponse.VisitGetCallsIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostCallsIdHangup operation middleware
func (sh *strictHandler) PostCallsIdHangup(ctx *gin.Context, id string) {
	var request PostCallsIdHangupRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostCallsIdHangup(ctx, request.(PostCallsIdHangupRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostCallsIdHangup")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostCallsIdHangupResponseObject); ok {
		if err := validResponse.VisitPostCallsIdHangupResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteCallsIdHold operation middleware
func (sh *strictHandler) DeleteCallsIdHold(ctx *gin.Context, id string) {
	var request DeleteCallsIdHoldRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteCallsIdHold(ctx, request.(DeleteCallsIdHoldRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteCallsIdHold")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteCallsIdHoldResponseObject); ok {
		if err := validResponse.VisitDeleteCallsIdHoldResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostCallsIdHold operation middleware
func (sh *strictHandler) PostCallsIdHold(ctx *gin.Context, id string) {
	var request PostCallsIdHoldRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostCallsIdHold(ctx, request.(PostCallsIdHoldRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostCallsIdHold")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostCallsIdHoldResponseObject); ok {
		if err := validResponse.VisitPostCallsIdHoldResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetCallsIdMediaStream operation middleware
func (sh *strictHandler) GetCallsIdMediaStream(ctx *gin.Context, id string) {
	var request GetCallsIdMediaStreamRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetCallsIdMediaStream(ctx, request.(GetCallsIdMediaStreamRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetCallsIdMediaStream")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetCallsIdMediaStreamResponseObject); ok {
		if err := validResponse.VisitGetCallsIdMediaStreamResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteCallsIdMoh operation middleware
func (sh *strictHandler) DeleteCallsIdMoh(ctx *gin.Context, id string) {
	var request DeleteCallsIdMohRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteCallsIdMoh(ctx, request.(DeleteCallsIdMohRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteCallsIdMoh")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteCallsIdMohResponseObject); ok {
		if err := validResponse.VisitDeleteCallsIdMohResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostCallsIdMoh operation middleware
func (sh *strictHandler) PostCallsIdMoh(ctx *gin.Context, id string) {
	var request PostCallsIdMohRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostCallsIdMoh(ctx, request.(PostCallsIdMohRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostCallsIdMoh")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostCallsIdMohResponseObject); ok {
		if err := validResponse.VisitPostCallsIdMohResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteCallsIdMute operation middleware
func (sh *strictHandler) DeleteCallsIdMute(ctx *gin.Context, id string) {
	var request DeleteCallsIdMuteRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteCallsIdMute(ctx, request.(DeleteCallsIdMuteRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteCallsIdMute")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteCallsIdMuteResponseObject); ok {
		if err := validResponse.VisitDeleteCallsIdMuteResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostCallsIdMute operation middleware
func (sh *strictHandler) PostCallsIdMute(ctx *gin.Context, id string) {
	var request PostCallsIdMuteRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostCallsIdMute(ctx, request.(PostCallsIdMuteRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostCallsIdMute")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostCallsIdMuteResponseObject); ok {
		if err := validResponse.VisitPostCallsIdMuteResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteCallsIdSilence operation middleware
func (sh *strictHandler) DeleteCallsIdSilence(ctx *gin.Context, id string) {
	var request DeleteCallsIdSilenceRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteCallsIdSilence(ctx, request.(DeleteCallsIdSilenceRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteCallsIdSilence")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteCallsIdSilenceResponseObject); ok {
		if err := validResponse.VisitDeleteCallsIdSilenceResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostCallsIdSilence operation middleware
func (sh *strictHandler) PostCallsIdSilence(ctx *gin.Context, id string) {
	var request PostCallsIdSilenceRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostCallsIdSilence(ctx, request.(PostCallsIdSilenceRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostCallsIdSilence")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostCallsIdSilenceResponseObject); ok {
		if err := validResponse.VisitPostCallsIdSilenceResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostCallsIdTalk operation middleware
func (sh *strictHandler) PostCallsIdTalk(ctx *gin.Context, id string) {
	var request PostCallsIdTalkRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostCallsIdTalk(ctx, request.(PostCallsIdTalkRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostCallsIdTalk")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostCallsIdTalkResponseObject); ok {
		if err := validResponse.VisitPostCallsIdTalkResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetCampaigncalls operation middleware
func (sh *strictHandler) GetCampaigncalls(ctx *gin.Context, params GetCampaigncallsParams) {
	var request GetCampaigncallsRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetCampaigncalls(ctx, request.(GetCampaigncallsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetCampaigncalls")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetCampaigncallsResponseObject); ok {
		if err := validResponse.VisitGetCampaigncallsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteCampaigncallsId operation middleware
func (sh *strictHandler) DeleteCampaigncallsId(ctx *gin.Context, id string) {
	var request DeleteCampaigncallsIdRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteCampaigncallsId(ctx, request.(DeleteCampaigncallsIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteCampaigncallsId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteCampaigncallsIdResponseObject); ok {
		if err := validResponse.VisitDeleteCampaigncallsIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetCampaigncallsId operation middleware
func (sh *strictHandler) GetCampaigncallsId(ctx *gin.Context, id string) {
	var request GetCampaigncallsIdRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetCampaigncallsId(ctx, request.(GetCampaigncallsIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetCampaigncallsId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetCampaigncallsIdResponseObject); ok {
		if err := validResponse.VisitGetCampaigncallsIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetCampaigns operation middleware
func (sh *strictHandler) GetCampaigns(ctx *gin.Context, params GetCampaignsParams) {
	var request GetCampaignsRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetCampaigns(ctx, request.(GetCampaignsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetCampaigns")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetCampaignsResponseObject); ok {
		if err := validResponse.VisitGetCampaignsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostCampaigns operation middleware
func (sh *strictHandler) PostCampaigns(ctx *gin.Context) {
	var request PostCampaignsRequestObject

	var body PostCampaignsJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostCampaigns(ctx, request.(PostCampaignsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostCampaigns")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostCampaignsResponseObject); ok {
		if err := validResponse.VisitPostCampaignsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteCampaignsId operation middleware
func (sh *strictHandler) DeleteCampaignsId(ctx *gin.Context, id string) {
	var request DeleteCampaignsIdRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteCampaignsId(ctx, request.(DeleteCampaignsIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteCampaignsId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteCampaignsIdResponseObject); ok {
		if err := validResponse.VisitDeleteCampaignsIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetCampaignsId operation middleware
func (sh *strictHandler) GetCampaignsId(ctx *gin.Context, id string) {
	var request GetCampaignsIdRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetCampaignsId(ctx, request.(GetCampaignsIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetCampaignsId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetCampaignsIdResponseObject); ok {
		if err := validResponse.VisitGetCampaignsIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PutCampaignsId operation middleware
func (sh *strictHandler) PutCampaignsId(ctx *gin.Context, id string) {
	var request PutCampaignsIdRequestObject

	request.Id = id

	var body PutCampaignsIdJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PutCampaignsId(ctx, request.(PutCampaignsIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutCampaignsId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PutCampaignsIdResponseObject); ok {
		if err := validResponse.VisitPutCampaignsIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PutCampaignsIdStatus operation middleware
func (sh *strictHandler) PutCampaignsIdStatus(ctx *gin.Context, id string) {
	var request PutCampaignsIdStatusRequestObject

	request.Id = id

	var body PutCampaignsIdStatusJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PutCampaignsIdStatus(ctx, request.(PutCampaignsIdStatusRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutCampaignsIdStatus")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PutCampaignsIdStatusResponseObject); ok {
		if err := validResponse.VisitPutCampaignsIdStatusResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetChatbotcalls operation middleware
func (sh *strictHandler) GetChatbotcalls(ctx *gin.Context, params GetChatbotcallsParams) {
	var request GetChatbotcallsRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetChatbotcalls(ctx, request.(GetChatbotcallsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetChatbotcalls")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetChatbotcallsResponseObject); ok {
		if err := validResponse.VisitGetChatbotcallsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteChatbotcallsId operation middleware
func (sh *strictHandler) DeleteChatbotcallsId(ctx *gin.Context, id string) {
	var request DeleteChatbotcallsIdRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteChatbotcallsId(ctx, request.(DeleteChatbotcallsIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteChatbotcallsId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteChatbotcallsIdResponseObject); ok {
		if err := validResponse.VisitDeleteChatbotcallsIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetChatbotcallsId operation middleware
func (sh *strictHandler) GetChatbotcallsId(ctx *gin.Context, id string) {
	var request GetChatbotcallsIdRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetChatbotcallsId(ctx, request.(GetChatbotcallsIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetChatbotcallsId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetChatbotcallsIdResponseObject); ok {
		if err := validResponse.VisitGetChatbotcallsIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetChatbots operation middleware
func (sh *strictHandler) GetChatbots(ctx *gin.Context, params GetChatbotsParams) {
	var request GetChatbotsRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetChatbots(ctx, request.(GetChatbotsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetChatbots")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetChatbotsResponseObject); ok {
		if err := validResponse.VisitGetChatbotsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostChatbots operation middleware
func (sh *strictHandler) PostChatbots(ctx *gin.Context) {
	var request PostChatbotsRequestObject

	var body PostChatbotsJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostChatbots(ctx, request.(PostChatbotsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostChatbots")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostChatbotsResponseObject); ok {
		if err := validResponse.VisitPostChatbotsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteChatbotsId operation middleware
func (sh *strictHandler) DeleteChatbotsId(ctx *gin.Context, id string) {
	var request DeleteChatbotsIdRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteChatbotsId(ctx, request.(DeleteChatbotsIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteChatbotsId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteChatbotsIdResponseObject); ok {
		if err := validResponse.VisitDeleteChatbotsIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetChatbotsId operation middleware
func (sh *strictHandler) GetChatbotsId(ctx *gin.Context, id string) {
	var request GetChatbotsIdRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetChatbotsId(ctx, request.(GetChatbotsIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetChatbotsId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetChatbotsIdResponseObject); ok {
		if err := validResponse.VisitGetChatbotsIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PutChatbotsId operation middleware
func (sh *strictHandler) PutChatbotsId(ctx *gin.Context, id string) {
	var request PutChatbotsIdRequestObject

	request.Id = id

	var body PutChatbotsIdJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PutChatbotsId(ctx, request.(PutChatbotsIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutChatbotsId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PutChatbotsIdResponseObject); ok {
		if err := validResponse.VisitPutChatbotsIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetChatmessages operation middleware
func (sh *strictHandler) GetChatmessages(ctx *gin.Context, params GetChatmessagesParams) {
	var request GetChatmessagesRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetChatmessages(ctx, request.(GetChatmessagesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetChatmessages")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetChatmessagesResponseObject); ok {
		if err := validResponse.VisitGetChatmessagesResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostChatmessages operation middleware
func (sh *strictHandler) PostChatmessages(ctx *gin.Context) {
	var request PostChatmessagesRequestObject

	var body PostChatmessagesJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostChatmessages(ctx, request.(PostChatmessagesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostChatmessages")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostChatmessagesResponseObject); ok {
		if err := validResponse.VisitPostChatmessagesResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteChatmessagesId operation middleware
func (sh *strictHandler) DeleteChatmessagesId(ctx *gin.Context, id string) {
	var request DeleteChatmessagesIdRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteChatmessagesId(ctx, request.(DeleteChatmessagesIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteChatmessagesId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteChatmessagesIdResponseObject); ok {
		if err := validResponse.VisitDeleteChatmessagesIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetChatmessagesId operation middleware
func (sh *strictHandler) GetChatmessagesId(ctx *gin.Context, id string) {
	var request GetChatmessagesIdRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetChatmessagesId(ctx, request.(GetChatmessagesIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetChatmessagesId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetChatmessagesIdResponseObject); ok {
		if err := validResponse.VisitGetChatmessagesIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetChatroommessages operation middleware
func (sh *strictHandler) GetChatroommessages(ctx *gin.Context, params GetChatroommessagesParams) {
	var request GetChatroommessagesRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetChatroommessages(ctx, request.(GetChatroommessagesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetChatroommessages")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetChatroommessagesResponseObject); ok {
		if err := validResponse.VisitGetChatroommessagesResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostChatroommessages operation middleware
func (sh *strictHandler) PostChatroommessages(ctx *gin.Context) {
	var request PostChatroommessagesRequestObject

	var body PostChatroommessagesJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostChatroommessages(ctx, request.(PostChatroommessagesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostChatroommessages")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostChatroommessagesResponseObject); ok {
		if err := validResponse.VisitPostChatroommessagesResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteChatroommessagesId operation middleware
func (sh *strictHandler) DeleteChatroommessagesId(ctx *gin.Context, id string) {
	var request DeleteChatroommessagesIdRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteChatroommessagesId(ctx, request.(DeleteChatroommessagesIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteChatroommessagesId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteChatroommessagesIdResponseObject); ok {
		if err := validResponse.VisitDeleteChatroommessagesIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetChatroommessagesId operation middleware
func (sh *strictHandler) GetChatroommessagesId(ctx *gin.Context, id string) {
	var request GetChatroommessagesIdRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetChatroommessagesId(ctx, request.(GetChatroommessagesIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetChatroommessagesId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetChatroommessagesIdResponseObject); ok {
		if err := validResponse.VisitGetChatroommessagesIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetChatrooms operation middleware
func (sh *strictHandler) GetChatrooms(ctx *gin.Context, params GetChatroomsParams) {
	var request GetChatroomsRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetChatrooms(ctx, request.(GetChatroomsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetChatrooms")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetChatroomsResponseObject); ok {
		if err := validResponse.VisitGetChatroomsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostChatrooms operation middleware
func (sh *strictHandler) PostChatrooms(ctx *gin.Context) {
	var request PostChatroomsRequestObject

	var body PostChatroomsJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostChatrooms(ctx, request.(PostChatroomsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostChatrooms")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostChatroomsResponseObject); ok {
		if err := validResponse.VisitPostChatroomsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteChatroomsId operation middleware
func (sh *strictHandler) DeleteChatroomsId(ctx *gin.Context, id string) {
	var request DeleteChatroomsIdRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteChatroomsId(ctx, request.(DeleteChatroomsIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteChatroomsId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteChatroomsIdResponseObject); ok {
		if err := validResponse.VisitDeleteChatroomsIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetChatroomsId operation middleware
func (sh *strictHandler) GetChatroomsId(ctx *gin.Context, id string) {
	var request GetChatroomsIdRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetChatroomsId(ctx, request.(GetChatroomsIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetChatroomsId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetChatroomsIdResponseObject); ok {
		if err := validResponse.VisitGetChatroomsIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PutChatroomsId operation middleware
func (sh *strictHandler) PutChatroomsId(ctx *gin.Context, id string) {
	var request PutChatroomsIdRequestObject

	request.Id = id

	var body PutChatroomsIdJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PutChatroomsId(ctx, request.(PutChatroomsIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutChatroomsId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PutChatroomsIdResponseObject); ok {
		if err := validResponse.VisitPutChatroomsIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetChats operation middleware
func (sh *strictHandler) GetChats(ctx *gin.Context, params GetChatsParams) {
	var request GetChatsRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetChats(ctx, request.(GetChatsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetChats")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetChatsResponseObject); ok {
		if err := validResponse.VisitGetChatsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostChats operation middleware
func (sh *strictHandler) PostChats(ctx *gin.Context) {
	var request PostChatsRequestObject

	var body PostChatsJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostChats(ctx, request.(PostChatsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostChats")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostChatsResponseObject); ok {
		if err := validResponse.VisitPostChatsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteChatsId operation middleware
func (sh *strictHandler) DeleteChatsId(ctx *gin.Context, id string) {
	var request DeleteChatsIdRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteChatsId(ctx, request.(DeleteChatsIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteChatsId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteChatsIdResponseObject); ok {
		if err := validResponse.VisitDeleteChatsIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetChatsId operation middleware
func (sh *strictHandler) GetChatsId(ctx *gin.Context, id string) {
	var request GetChatsIdRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetChatsId(ctx, request.(GetChatsIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetChatsId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetChatsIdResponseObject); ok {
		if err := validResponse.VisitGetChatsIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PutChatsId operation middleware
func (sh *strictHandler) PutChatsId(ctx *gin.Context, id string) {
	var request PutChatsIdRequestObject

	request.Id = id

	var body PutChatsIdJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PutChatsId(ctx, request.(PutChatsIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutChatsId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PutChatsIdResponseObject); ok {
		if err := validResponse.VisitPutChatsIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostChatsIdParticipantIds operation middleware
func (sh *strictHandler) PostChatsIdParticipantIds(ctx *gin.Context, id string) {
	var request PostChatsIdParticipantIdsRequestObject

	request.Id = id

	var body PostChatsIdParticipantIdsJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostChatsIdParticipantIds(ctx, request.(PostChatsIdParticipantIdsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostChatsIdParticipantIds")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostChatsIdParticipantIdsResponseObject); ok {
		if err := validResponse.VisitPostChatsIdParticipantIdsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}
